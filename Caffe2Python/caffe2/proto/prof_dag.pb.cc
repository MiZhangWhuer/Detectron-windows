// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: prof_dag.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "prof_dag.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* ProfDAGProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfDAGProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* ProfDAGProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ProfDAGProtos_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_prof_5fdag_2eproto() {
  protobuf_AddDesc_prof_5fdag_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "prof_dag.proto");
  GOOGLE_CHECK(file != NULL);
  ProfDAGProto_descriptor_ = file->message_type(0);
  static const int ProfDAGProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, mean_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, stddev_),
  };
  ProfDAGProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfDAGProto_descriptor_,
      ProfDAGProto::default_instance_,
      ProfDAGProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfDAGProto));
  ProfDAGProtos_descriptor_ = file->message_type(1);
  static const int ProfDAGProtos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, stats_),
  };
  ProfDAGProtos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ProfDAGProtos_descriptor_,
      ProfDAGProtos::default_instance_,
      ProfDAGProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ProfDAGProtos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ProfDAGProtos));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_prof_5fdag_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfDAGProto_descriptor_, &ProfDAGProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ProfDAGProtos_descriptor_, &ProfDAGProtos::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_prof_5fdag_2eproto() {
  delete ProfDAGProto::default_instance_;
  delete ProfDAGProto_reflection_;
  delete ProfDAGProtos::default_instance_;
  delete ProfDAGProtos_reflection_;
}

void protobuf_AddDesc_prof_5fdag_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\016prof_dag.proto\022\006caffe2\":\n\014ProfDAGProto"
    "\022\014\n\004name\030\001 \002(\t\022\014\n\004mean\030\002 \002(\002\022\016\n\006stddev\030\003"
    " \002(\002\"4\n\rProfDAGProtos\022#\n\005stats\030\001 \003(\0132\024.c"
    "affe2.ProfDAGProto", 138);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "prof_dag.proto", &protobuf_RegisterTypes);
  ProfDAGProto::default_instance_ = new ProfDAGProto();
  ProfDAGProtos::default_instance_ = new ProfDAGProtos();
  ProfDAGProto::default_instance_->InitAsDefaultInstance();
  ProfDAGProtos::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_prof_5fdag_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_prof_5fdag_2eproto {
  StaticDescriptorInitializer_prof_5fdag_2eproto() {
    protobuf_AddDesc_prof_5fdag_2eproto();
  }
} static_descriptor_initializer_prof_5fdag_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ProfDAGProto::kNameFieldNumber;
const int ProfDAGProto::kMeanFieldNumber;
const int ProfDAGProto::kStddevFieldNumber;
#endif  // !_MSC_VER

ProfDAGProto::ProfDAGProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfDAGProto::InitAsDefaultInstance() {
}

ProfDAGProto::ProfDAGProto(const ProfDAGProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfDAGProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mean_ = 0;
  stddev_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfDAGProto::~ProfDAGProto() {
  SharedDtor();
}

void ProfDAGProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ProfDAGProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfDAGProto_descriptor_;
}

const ProfDAGProto& ProfDAGProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prof_5fdag_2eproto();
  return *default_instance_;
}

ProfDAGProto* ProfDAGProto::default_instance_ = NULL;

ProfDAGProto* ProfDAGProto::New() const {
  return new ProfDAGProto;
}

void ProfDAGProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    mean_ = 0;
    stddev_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfDAGProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_mean;
        break;
      }

      // required float mean = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_mean:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &mean_)));
          set_has_mean();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_stddev;
        break;
      }

      // required float stddev = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_stddev:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &stddev_)));
          set_has_stddev();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfDAGProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // required float mean = 2;
  if (has_mean()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->mean(), output);
  }

  // required float stddev = 3;
  if (has_stddev()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->stddev(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfDAGProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // required float mean = 2;
  if (has_mean()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->mean(), target);
  }

  // required float stddev = 3;
  if (has_stddev()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->stddev(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfDAGProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required float mean = 2;
    if (has_mean()) {
      total_size += 1 + 4;
    }

    // required float stddev = 3;
    if (has_stddev()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfDAGProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfDAGProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfDAGProto::MergeFrom(const ProfDAGProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mean()) {
      set_mean(from.mean());
    }
    if (from.has_stddev()) {
      set_stddev(from.stddev());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfDAGProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProto::CopyFrom(const ProfDAGProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ProfDAGProto::Swap(ProfDAGProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(mean_, other->mean_);
    std::swap(stddev_, other->stddev_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfDAGProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfDAGProto_descriptor_;
  metadata.reflection = ProfDAGProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ProfDAGProtos::kStatsFieldNumber;
#endif  // !_MSC_VER

ProfDAGProtos::ProfDAGProtos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ProfDAGProtos::InitAsDefaultInstance() {
}

ProfDAGProtos::ProfDAGProtos(const ProfDAGProtos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ProfDAGProtos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ProfDAGProtos::~ProfDAGProtos() {
  SharedDtor();
}

void ProfDAGProtos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ProfDAGProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ProfDAGProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ProfDAGProtos_descriptor_;
}

const ProfDAGProtos& ProfDAGProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_prof_5fdag_2eproto();
  return *default_instance_;
}

ProfDAGProtos* ProfDAGProtos::default_instance_ = NULL;

ProfDAGProtos* ProfDAGProtos::New() const {
  return new ProfDAGProtos;
}

void ProfDAGProtos::Clear() {
  stats_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ProfDAGProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.ProfDAGProto stats = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_stats:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_stats()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_stats;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ProfDAGProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffe2.ProfDAGProto stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->stats(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ProfDAGProtos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffe2.ProfDAGProto stats = 1;
  for (int i = 0; i < this->stats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->stats(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ProfDAGProtos::ByteSize() const {
  int total_size = 0;

  // repeated .caffe2.ProfDAGProto stats = 1;
  total_size += 1 * this->stats_size();
  for (int i = 0; i < this->stats_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->stats(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ProfDAGProtos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ProfDAGProtos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ProfDAGProtos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ProfDAGProtos::MergeFrom(const ProfDAGProtos& from) {
  GOOGLE_CHECK_NE(&from, this);
  stats_.MergeFrom(from.stats_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ProfDAGProtos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ProfDAGProtos::CopyFrom(const ProfDAGProtos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ProfDAGProtos::IsInitialized() const {

  for (int i = 0; i < stats_size(); i++) {
    if (!this->stats(i).IsInitialized()) return false;
  }
  return true;
}

void ProfDAGProtos::Swap(ProfDAGProtos* other) {
  if (other != this) {
    stats_.Swap(&other->stats_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ProfDAGProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ProfDAGProtos_descriptor_;
  metadata.reflection = ProfDAGProtos_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
