// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: caffe2.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "caffe2.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* TensorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TensorProto_Segment_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProto_Segment_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor_ = NULL;
const ::google::protobuf::Descriptor* QTensorProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QTensorProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TensorProtos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorProtos_reflection_ = NULL;
const ::google::protobuf::Descriptor* TensorShape_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorShape_reflection_ = NULL;
const ::google::protobuf::Descriptor* TensorShapes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TensorShapes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Argument_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Argument_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeviceOption_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeviceOption_reflection_ = NULL;
const ::google::protobuf::Descriptor* OperatorDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OperatorDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExecutionStep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExecutionStep_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlanDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlanDef_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBReaderProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBReaderProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* InputInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InputInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OutputInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OutputInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelMeta_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelMeta_reflection_ = NULL;
const ::google::protobuf::Descriptor* ModelDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelDef_reflection_ = NULL;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor_ = NULL;

}  // namespace


void protobuf_AssignDesc_caffe2_2eproto() {
  protobuf_AddDesc_caffe2_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "caffe2.proto");
  GOOGLE_CHECK(file != NULL);
  TensorProto_descriptor_ = file->message_type(0);
  static const int TensorProto_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, float_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, int32_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, byte_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, string_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, double_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, int64_data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, device_detail_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, segment_),
  };
  TensorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProto_descriptor_,
      TensorProto::default_instance_,
      TensorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProto));
  TensorProto_Segment_descriptor_ = TensorProto_descriptor_->nested_type(0);
  static const int TensorProto_Segment_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, end_),
  };
  TensorProto_Segment_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProto_Segment_descriptor_,
      TensorProto_Segment::default_instance_,
      TensorProto_Segment_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProto_Segment, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProto_Segment));
  TensorProto_DataType_descriptor_ = TensorProto_descriptor_->enum_type(0);
  QTensorProto_descriptor_ = file->message_type(1);
  static const int QTensorProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, precision_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, scale_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, bias_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, is_signed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, data_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, name_),
  };
  QTensorProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QTensorProto_descriptor_,
      QTensorProto::default_instance_,
      QTensorProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QTensorProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QTensorProto));
  TensorProtos_descriptor_ = file->message_type(2);
  static const int TensorProtos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, protos_),
  };
  TensorProtos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorProtos_descriptor_,
      TensorProtos::default_instance_,
      TensorProtos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorProtos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorProtos));
  TensorShape_descriptor_ = file->message_type(3);
  static const int TensorShape_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, data_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, unknown_dims_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, unknown_shape_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, name_),
  };
  TensorShape_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorShape_descriptor_,
      TensorShape::default_instance_,
      TensorShape_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShape, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorShape));
  TensorShapes_descriptor_ = file->message_type(4);
  static const int TensorShapes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShapes, shapes_),
  };
  TensorShapes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TensorShapes_descriptor_,
      TensorShapes::default_instance_,
      TensorShapes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShapes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TensorShapes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TensorShapes));
  Argument_descriptor_ = file->message_type(5);
  static const int Argument_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, f_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, i_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, s_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, n_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, floats_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, ints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, strings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, nets_),
  };
  Argument_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Argument_descriptor_,
      Argument::default_instance_,
      Argument_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Argument, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Argument));
  DeviceOption_descriptor_ = file->message_type(6);
  static const int DeviceOption_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, device_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, cuda_gpu_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, random_seed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, node_name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, numa_node_id_),
  };
  DeviceOption_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeviceOption_descriptor_,
      DeviceOption::default_instance_,
      DeviceOption_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeviceOption, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeviceOption));
  OperatorDef_descriptor_ = file->message_type(7);
  static const int OperatorDef_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, output_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, device_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, engine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, control_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, is_gradient_op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, debug_info_),
  };
  OperatorDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OperatorDef_descriptor_,
      OperatorDef::default_instance_,
      OperatorDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OperatorDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OperatorDef));
  NetDef_descriptor_ = file->message_type(8);
  static const int NetDef_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, num_workers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, device_option_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, arg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, external_input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, external_output_),
  };
  NetDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetDef_descriptor_,
      NetDef::default_instance_,
      NetDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetDef));
  ExecutionStep_descriptor_ = file->message_type(9);
  static const int ExecutionStep_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, substep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, num_iter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, criteria_network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, report_net_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, report_interval_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, run_every_ms_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, concurrent_substeps_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, should_stop_blob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, only_once_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, create_workspace_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, num_concurrent_instances_),
  };
  ExecutionStep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExecutionStep_descriptor_,
      ExecutionStep::default_instance_,
      ExecutionStep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExecutionStep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExecutionStep));
  PlanDef_descriptor_ = file->message_type(10);
  static const int PlanDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, network_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, execution_step_),
  };
  PlanDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlanDef_descriptor_,
      PlanDef::default_instance_,
      PlanDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlanDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlanDef));
  BlobProto_descriptor_ = file->message_type(11);
  static const int BlobProto_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, tensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, content_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, qtensor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, content_num_chunks_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, content_chunk_id_),
  };
  BlobProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobProto_descriptor_,
      BlobProto::default_instance_,
      BlobProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobProto));
  DBReaderProto_descriptor_ = file->message_type(12);
  static const int DBReaderProto_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, db_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, key_),
  };
  DBReaderProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBReaderProto_descriptor_,
      DBReaderProto::default_instance_,
      DBReaderProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBReaderProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBReaderProto));
  InputInfo_descriptor_ = file->message_type(13);
  static const int InputInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputInfo, dims_),
  };
  InputInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InputInfo_descriptor_,
      InputInfo::default_instance_,
      InputInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InputInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InputInfo));
  OutputInfo_descriptor_ = file->message_type(14);
  static const int OutputInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputInfo, labels_),
  };
  OutputInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OutputInfo_descriptor_,
      OutputInfo::default_instance_,
      OutputInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OutputInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OutputInfo));
  ModelMeta_descriptor_ = file->message_type(15);
  static const int ModelMeta_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMeta, input_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMeta, output_),
  };
  ModelMeta_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelMeta_descriptor_,
      ModelMeta::default_instance_,
      ModelMeta_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMeta, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelMeta, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelMeta));
  ModelDef_descriptor_ = file->message_type(16);
  static const int ModelDef_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, meta_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, init_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, predict_),
  };
  ModelDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelDef_descriptor_,
      ModelDef::default_instance_,
      ModelDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelDef));
  DeviceType_descriptor_ = file->enum_type(0);
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_caffe2_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProto_descriptor_, &TensorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProto_Segment_descriptor_, &TensorProto_Segment::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QTensorProto_descriptor_, &QTensorProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorProtos_descriptor_, &TensorProtos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorShape_descriptor_, &TensorShape::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TensorShapes_descriptor_, &TensorShapes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Argument_descriptor_, &Argument::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeviceOption_descriptor_, &DeviceOption::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OperatorDef_descriptor_, &OperatorDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetDef_descriptor_, &NetDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExecutionStep_descriptor_, &ExecutionStep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlanDef_descriptor_, &PlanDef::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobProto_descriptor_, &BlobProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBReaderProto_descriptor_, &DBReaderProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InputInfo_descriptor_, &InputInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OutputInfo_descriptor_, &OutputInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelMeta_descriptor_, &ModelMeta::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelDef_descriptor_, &ModelDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_caffe2_2eproto() {
  delete TensorProto::default_instance_;
  delete TensorProto_reflection_;
  delete TensorProto_Segment::default_instance_;
  delete TensorProto_Segment_reflection_;
  delete QTensorProto::default_instance_;
  delete QTensorProto_reflection_;
  delete TensorProtos::default_instance_;
  delete TensorProtos_reflection_;
  delete TensorShape::default_instance_;
  delete TensorShape_reflection_;
  delete TensorShapes::default_instance_;
  delete TensorShapes_reflection_;
  delete Argument::default_instance_;
  delete Argument_reflection_;
  delete DeviceOption::default_instance_;
  delete DeviceOption_reflection_;
  delete OperatorDef::default_instance_;
  delete OperatorDef_reflection_;
  delete NetDef::default_instance_;
  delete NetDef_reflection_;
  delete ExecutionStep::default_instance_;
  delete ExecutionStep_reflection_;
  delete PlanDef::default_instance_;
  delete PlanDef_reflection_;
  delete BlobProto::default_instance_;
  delete BlobProto_reflection_;
  delete DBReaderProto::default_instance_;
  delete DBReaderProto_reflection_;
  delete InputInfo::default_instance_;
  delete InputInfo_reflection_;
  delete OutputInfo::default_instance_;
  delete OutputInfo_reflection_;
  delete ModelMeta::default_instance_;
  delete ModelMeta_reflection_;
  delete ModelDef::default_instance_;
  delete ModelDef_reflection_;
}

void protobuf_AddDesc_caffe2_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\014caffe2.proto\022\006caffe2\"\216\004\n\013TensorProto\022\014"
    "\n\004dims\030\001 \003(\003\0226\n\tdata_type\030\002 \001(\0162\034.caffe2"
    ".TensorProto.DataType:\005FLOAT\022\026\n\nfloat_da"
    "ta\030\003 \003(\002B\002\020\001\022\026\n\nint32_data\030\004 \003(\005B\002\020\001\022\021\n\t"
    "byte_data\030\005 \001(\014\022\023\n\013string_data\030\006 \003(\014\022\027\n\013"
    "double_data\030\t \003(\001B\002\020\001\022\026\n\nint64_data\030\n \003("
    "\003B\002\020\001\022\014\n\004name\030\007 \001(\t\022+\n\rdevice_detail\030\010 \001"
    "(\0132\024.caffe2.DeviceOption\022,\n\007segment\030\013 \001("
    "\0132\033.caffe2.TensorProto.Segment\032%\n\007Segmen"
    "t\022\r\n\005begin\030\001 \002(\003\022\013\n\003end\030\002 \002(\003\"\237\001\n\010DataTy"
    "pe\022\r\n\tUNDEFINED\020\000\022\t\n\005FLOAT\020\001\022\t\n\005INT32\020\002\022"
    "\010\n\004BYTE\020\003\022\n\n\006STRING\020\004\022\010\n\004BOOL\020\005\022\t\n\005UINT8"
    "\020\006\022\010\n\004INT8\020\007\022\n\n\006UINT16\020\010\022\t\n\005INT16\020\t\022\t\n\005I"
    "NT64\020\n\022\013\n\007FLOAT16\020\014\022\n\n\006DOUBLE\020\r\"\177\n\014QTens"
    "orProto\022\014\n\004dims\030\001 \003(\003\022\021\n\tprecision\030\002 \002(\005"
    "\022\r\n\005scale\030\003 \002(\001\022\014\n\004bias\030\004 \002(\001\022\021\n\tis_sign"
    "ed\030\005 \002(\010\022\020\n\004data\030\006 \003(\005B\002\020\001\022\014\n\004name\030\007 \001(\t"
    "\"3\n\014TensorProtos\022#\n\006protos\030\001 \003(\0132\023.caffe"
    "2.TensorProto\"\225\001\n\013TensorShape\022\014\n\004dims\030\001 "
    "\003(\003\0226\n\tdata_type\030\002 \001(\0162\034.caffe2.TensorPr"
    "oto.DataType:\005FLOAT\022\024\n\014unknown_dims\030\003 \003("
    "\005\022\034\n\runknown_shape\030\004 \001(\010:\005false\022\014\n\004name\030"
    "\005 \001(\t\"3\n\014TensorShapes\022#\n\006shapes\030\001 \003(\0132\023."
    "caffe2.TensorShape\"\241\001\n\010Argument\022\014\n\004name\030"
    "\001 \001(\t\022\t\n\001f\030\002 \001(\002\022\t\n\001i\030\003 \001(\003\022\t\n\001s\030\004 \001(\014\022\031"
    "\n\001n\030\010 \001(\0132\016.caffe2.NetDef\022\016\n\006floats\030\005 \003("
    "\002\022\014\n\004ints\030\006 \003(\003\022\017\n\007strings\030\007 \003(\014\022\034\n\004nets"
    "\030\t \003(\0132\016.caffe2.NetDef\"}\n\014DeviceOption\022\026"
    "\n\013device_type\030\001 \001(\005:\0010\022\023\n\013cuda_gpu_id\030\002 "
    "\001(\005\022\023\n\013random_seed\030\003 \001(\r\022\021\n\tnode_name\030\004 "
    "\001(\t\022\030\n\014numa_node_id\030\005 \001(\005:\002-1\"\356\001\n\013Operat"
    "orDef\022\r\n\005input\030\001 \003(\t\022\016\n\006output\030\002 \003(\t\022\014\n\004"
    "name\030\003 \001(\t\022\014\n\004type\030\004 \001(\t\022\035\n\003arg\030\005 \003(\0132\020."
    "caffe2.Argument\022+\n\rdevice_option\030\006 \001(\0132\024"
    ".caffe2.DeviceOption\022\016\n\006engine\030\007 \001(\t\022\025\n\r"
    "control_input\030\010 \003(\t\022\035\n\016is_gradient_op\030\t "
    "\001(\010:\005false\022\022\n\ndebug_info\030\n \001(\t\"\333\001\n\006NetDe"
    "f\022\014\n\004name\030\001 \001(\t\022\037\n\002op\030\002 \003(\0132\023.caffe2.Ope"
    "ratorDef\022\014\n\004type\030\003 \001(\t\022\027\n\013num_workers\030\004 "
    "\001(\005B\002\030\001\022+\n\rdevice_option\030\005 \001(\0132\024.caffe2."
    "DeviceOption\022\035\n\003arg\030\006 \003(\0132\020.caffe2.Argum"
    "ent\022\026\n\016external_input\030\007 \003(\t\022\027\n\017external_"
    "output\030\010 \003(\t\"\317\002\n\rExecutionStep\022\014\n\004name\030\001"
    " \001(\t\022&\n\007substep\030\002 \003(\0132\025.caffe2.Execution"
    "Step\022\017\n\007network\030\003 \003(\t\022\020\n\010num_iter\030\004 \001(\003\022"
    "\034\n\020criteria_network\030\005 \001(\tB\002\030\001\022\022\n\nreport_"
    "net\030\007 \001(\t\022\027\n\017report_interval\030\010 \001(\005\022\024\n\014ru"
    "n_every_ms\030\013 \001(\003\022\033\n\023concurrent_substeps\030"
    "\006 \001(\010\022\030\n\020should_stop_blob\030\t \001(\t\022\021\n\tonly_"
    "once\030\n \001(\010\022\030\n\020create_workspace\030\014 \001(\010\022 \n\030"
    "num_concurrent_instances\030\r \001(\005\"g\n\007PlanDe"
    "f\022\014\n\004name\030\001 \001(\t\022\037\n\007network\030\002 \003(\0132\016.caffe"
    "2.NetDef\022-\n\016execution_step\030\003 \003(\0132\025.caffe"
    "2.ExecutionStep\"\272\001\n\tBlobProto\022\014\n\004name\030\001 "
    "\001(\t\022\014\n\004type\030\002 \001(\t\022#\n\006tensor\030\003 \001(\0132\023.caff"
    "e2.TensorProto\022\017\n\007content\030\004 \001(\014\022%\n\007qtens"
    "or\030\005 \001(\0132\024.caffe2.QTensorProto\022\032\n\022conten"
    "t_num_chunks\030\006 \001(\005\022\030\n\020content_chunk_id\030\007"
    " \001(\005\"K\n\rDBReaderProto\022\014\n\004name\030\001 \001(\t\022\016\n\006s"
    "ource\030\002 \001(\t\022\017\n\007db_type\030\003 \001(\t\022\013\n\003key\030\004 \001("
    "\t\"\031\n\tInputInfo\022\014\n\004dims\030\001 \003(\r\"\034\n\nOutputIn"
    "fo\022\016\n\006labels\030\001 \003(\t\"Q\n\tModelMeta\022 \n\005input"
    "\030\001 \001(\0132\021.caffe2.InputInfo\022\"\n\006output\030\002 \001("
    "\0132\022.caffe2.OutputInfo\"j\n\010ModelDef\022\037\n\004met"
    "a\030\001 \001(\0132\021.caffe2.ModelMeta\022\034\n\004init\030\002 \001(\013"
    "2\016.caffe2.NetDef\022\037\n\007predict\030\003 \001(\0132\016.caff"
    "e2.NetDef*p\n\nDeviceType\022\007\n\003CPU\020\000\022\010\n\004CUDA"
    "\020\001\022\n\n\006MKLDNN\020\002\022\n\n\006OPENGL\020\003\022!\n\035COMPILE_TI"
    "ME_MAX_DEVICE_TYPES\020\004\022\024\n\rONLY_FOR_TEST\020\305"
    "\336\373\t", 2763);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "caffe2.proto", &protobuf_RegisterTypes);
  TensorProto::default_instance_ = new TensorProto();
  TensorProto_Segment::default_instance_ = new TensorProto_Segment();
  QTensorProto::default_instance_ = new QTensorProto();
  TensorProtos::default_instance_ = new TensorProtos();
  TensorShape::default_instance_ = new TensorShape();
  TensorShapes::default_instance_ = new TensorShapes();
  Argument::default_instance_ = new Argument();
  DeviceOption::default_instance_ = new DeviceOption();
  OperatorDef::default_instance_ = new OperatorDef();
  NetDef::default_instance_ = new NetDef();
  ExecutionStep::default_instance_ = new ExecutionStep();
  PlanDef::default_instance_ = new PlanDef();
  BlobProto::default_instance_ = new BlobProto();
  DBReaderProto::default_instance_ = new DBReaderProto();
  InputInfo::default_instance_ = new InputInfo();
  OutputInfo::default_instance_ = new OutputInfo();
  ModelMeta::default_instance_ = new ModelMeta();
  ModelDef::default_instance_ = new ModelDef();
  TensorProto::default_instance_->InitAsDefaultInstance();
  TensorProto_Segment::default_instance_->InitAsDefaultInstance();
  QTensorProto::default_instance_->InitAsDefaultInstance();
  TensorProtos::default_instance_->InitAsDefaultInstance();
  TensorShape::default_instance_->InitAsDefaultInstance();
  TensorShapes::default_instance_->InitAsDefaultInstance();
  Argument::default_instance_->InitAsDefaultInstance();
  DeviceOption::default_instance_->InitAsDefaultInstance();
  OperatorDef::default_instance_->InitAsDefaultInstance();
  NetDef::default_instance_->InitAsDefaultInstance();
  ExecutionStep::default_instance_->InitAsDefaultInstance();
  PlanDef::default_instance_->InitAsDefaultInstance();
  BlobProto::default_instance_->InitAsDefaultInstance();
  DBReaderProto::default_instance_->InitAsDefaultInstance();
  InputInfo::default_instance_->InitAsDefaultInstance();
  OutputInfo::default_instance_->InitAsDefaultInstance();
  ModelMeta::default_instance_->InitAsDefaultInstance();
  ModelDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_caffe2_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_caffe2_2eproto {
  StaticDescriptorInitializer_caffe2_2eproto() {
    protobuf_AddDesc_caffe2_2eproto();
  }
} static_descriptor_initializer_caffe2_2eproto_;
const ::google::protobuf::EnumDescriptor* DeviceType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceType_descriptor_;
}
bool DeviceType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 20901701:
      return true;
    default:
      return false;
  }
}


// ===================================================================

const ::google::protobuf::EnumDescriptor* TensorProto_DataType_descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_DataType_descriptor_;
}
bool TensorProto_DataType_IsValid(int value) {
  switch(value) {
    case 0:
    case 1:
    case 2:
    case 3:
    case 4:
    case 5:
    case 6:
    case 7:
    case 8:
    case 9:
    case 10:
    case 12:
    case 13:
      return true;
    default:
      return false;
  }
}

#ifndef _MSC_VER
const TensorProto_DataType TensorProto::UNDEFINED;
const TensorProto_DataType TensorProto::FLOAT;
const TensorProto_DataType TensorProto::INT32;
const TensorProto_DataType TensorProto::BYTE;
const TensorProto_DataType TensorProto::STRING;
const TensorProto_DataType TensorProto::BOOL;
const TensorProto_DataType TensorProto::UINT8;
const TensorProto_DataType TensorProto::INT8;
const TensorProto_DataType TensorProto::UINT16;
const TensorProto_DataType TensorProto::INT16;
const TensorProto_DataType TensorProto::INT64;
const TensorProto_DataType TensorProto::FLOAT16;
const TensorProto_DataType TensorProto::DOUBLE;
const TensorProto_DataType TensorProto::DataType_MIN;
const TensorProto_DataType TensorProto::DataType_MAX;
const int TensorProto::DataType_ARRAYSIZE;
#endif  // _MSC_VER
#ifndef _MSC_VER
const int TensorProto_Segment::kBeginFieldNumber;
const int TensorProto_Segment::kEndFieldNumber;
#endif  // !_MSC_VER

TensorProto_Segment::TensorProto_Segment()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TensorProto_Segment::InitAsDefaultInstance() {
}

TensorProto_Segment::TensorProto_Segment(const TensorProto_Segment& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TensorProto_Segment::SharedCtor() {
  _cached_size_ = 0;
  begin_ = GOOGLE_LONGLONG(0);
  end_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProto_Segment::~TensorProto_Segment() {
  SharedDtor();
}

void TensorProto_Segment::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TensorProto_Segment::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto_Segment::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_Segment_descriptor_;
}

const TensorProto_Segment& TensorProto_Segment::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorProto_Segment* TensorProto_Segment::default_instance_ = NULL;

TensorProto_Segment* TensorProto_Segment::New() const {
  return new TensorProto_Segment;
}

void TensorProto_Segment::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = GOOGLE_LONGLONG(0);
    end_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProto_Segment::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required int64 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TensorProto_Segment::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begin(), output);
  }

  // required int64 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TensorProto_Segment::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begin(), target);
  }

  // required int64 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TensorProto_Segment::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begin());
    }

    // required int64 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto_Segment::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProto_Segment* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProto_Segment*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProto_Segment::MergeFrom(const TensorProto_Segment& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProto_Segment::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto_Segment::CopyFrom(const TensorProto_Segment& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto_Segment::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TensorProto_Segment::Swap(TensorProto_Segment* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProto_Segment::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProto_Segment_descriptor_;
  metadata.reflection = TensorProto_Segment_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int TensorProto::kDimsFieldNumber;
const int TensorProto::kDataTypeFieldNumber;
const int TensorProto::kFloatDataFieldNumber;
const int TensorProto::kInt32DataFieldNumber;
const int TensorProto::kByteDataFieldNumber;
const int TensorProto::kStringDataFieldNumber;
const int TensorProto::kDoubleDataFieldNumber;
const int TensorProto::kInt64DataFieldNumber;
const int TensorProto::kNameFieldNumber;
const int TensorProto::kDeviceDetailFieldNumber;
const int TensorProto::kSegmentFieldNumber;
#endif  // !_MSC_VER

TensorProto::TensorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TensorProto::InitAsDefaultInstance() {
  device_detail_ = const_cast< ::caffe2::DeviceOption*>(&::caffe2::DeviceOption::default_instance());
  segment_ = const_cast< ::caffe2::TensorProto_Segment*>(&::caffe2::TensorProto_Segment::default_instance());
}

TensorProto::TensorProto(const TensorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TensorProto::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 1;
  byte_data_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_detail_ = NULL;
  segment_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProto::~TensorProto() {
  SharedDtor();
}

void TensorProto::SharedDtor() {
  if (byte_data_ != &::google::protobuf::internal::kEmptyString) {
    delete byte_data_;
  }
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete device_detail_;
    delete segment_;
  }
}

void TensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProto_descriptor_;
}

const TensorProto& TensorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorProto* TensorProto::default_instance_ = NULL;

TensorProto* TensorProto::New() const {
  return new TensorProto;
}

void TensorProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    data_type_ = 1;
    if (has_byte_data()) {
      if (byte_data_ != &::google::protobuf::internal::kEmptyString) {
        byte_data_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_device_detail()) {
      if (device_detail_ != NULL) device_detail_->::caffe2::DeviceOption::Clear();
    }
    if (has_segment()) {
      if (segment_ != NULL) segment_->::caffe2::TensorProto_Segment::Clear();
    }
  }
  dims_.Clear();
  float_data_.Clear();
  int32_data_.Clear();
  string_data_.Clear();
  double_data_.Clear();
  int64_data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe2::TensorProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::caffe2::TensorProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_float_data;
        break;
      }

      // repeated float float_data = 3 [packed = true];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_float_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_float_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED32) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 26, input, this->mutable_float_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_int32_data;
        break;
      }

      // repeated int32 int32_data = 4 [packed = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int32_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_int32_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 34, input, this->mutable_int32_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_byte_data;
        break;
      }

      // optional bytes byte_data = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_byte_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_byte_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        break;
      }

      // repeated bytes string_data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_string_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_string_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_string_data;
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_device_detail;
        break;
      }

      // optional .caffe2.DeviceOption device_detail = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_detail:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_detail()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_double_data;
        break;
      }

      // repeated double double_data = 9 [packed = true];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_double_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, this->mutable_double_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_FIXED64) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 1, 74, input, this->mutable_double_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_int64_data;
        break;
      }

      // repeated int64 int64_data = 10 [packed = true];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_int64_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_int64_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 82, input, this->mutable_int64_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_segment;
        break;
      }

      // optional .caffe2.TensorProto.Segment segment = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_segment:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_segment()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(3, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_float_data_cached_byte_size_);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloatNoTag(
      this->float_data(i), output);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(4, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int32_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->int32_data(i), output);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->byte_data(), output);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->string_data(i), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  // optional .caffe2.DeviceOption device_detail = 8;
  if (has_device_detail()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->device_detail(), output);
  }

  // repeated double double_data = 9 [packed = true];
  if (this->double_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(9, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_double_data_cached_byte_size_);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteDoubleNoTag(
      this->double_data(i), output);
  }

  // repeated int64 int64_data = 10 [packed = true];
  if (this->int64_data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(10, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_int64_data_cached_byte_size_);
  }
  for (int i = 0; i < this->int64_data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64NoTag(
      this->int64_data(i), output);
  }

  // optional .caffe2.TensorProto.Segment segment = 11;
  if (has_segment()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->segment(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TensorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->dims(i), target);
  }

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated float float_data = 3 [packed = true];
  if (this->float_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      3,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _float_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->float_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatNoTagToArray(this->float_data(i), target);
  }

  // repeated int32 int32_data = 4 [packed = true];
  if (this->int32_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      4,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int32_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int32_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->int32_data(i), target);
  }

  // optional bytes byte_data = 5;
  if (has_byte_data()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->byte_data(), target);
  }

  // repeated bytes string_data = 6;
  for (int i = 0; i < this->string_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(6, this->string_data(i), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  // optional .caffe2.DeviceOption device_detail = 8;
  if (has_device_detail()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->device_detail(), target);
  }

  // repeated double double_data = 9 [packed = true];
  if (this->double_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      9,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _double_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->double_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteDoubleNoTagToArray(this->double_data(i), target);
  }

  // repeated int64 int64_data = 10 [packed = true];
  if (this->int64_data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      10,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _int64_data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->int64_data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64NoTagToArray(this->int64_data(i), target);
  }

  // optional .caffe2.TensorProto.Segment segment = 11;
  if (has_segment()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->segment(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TensorProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional bytes byte_data = 5;
    if (has_byte_data()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->byte_data());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .caffe2.DeviceOption device_detail = 8;
    if (has_device_detail()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_detail());
    }

    // optional .caffe2.TensorProto.Segment segment = 11;
    if (has_segment()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->segment());
    }

  }
  // repeated int64 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  // repeated float float_data = 3 [packed = true];
  {
    int data_size = 0;
    data_size = 4 * this->float_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _float_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int32 int32_data = 4 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->int32_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->int32_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int32_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated bytes string_data = 6;
  total_size += 1 * this->string_data_size();
  for (int i = 0; i < this->string_data_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->string_data(i));
  }

  // repeated double double_data = 9 [packed = true];
  {
    int data_size = 0;
    data_size = 8 * this->double_data_size();
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _double_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // repeated int64 int64_data = 10 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->int64_data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->int64_data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _int64_data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProto::MergeFrom(const TensorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  float_data_.MergeFrom(from.float_data_);
  int32_data_.MergeFrom(from.int32_data_);
  string_data_.MergeFrom(from.string_data_);
  double_data_.MergeFrom(from.double_data_);
  int64_data_.MergeFrom(from.int64_data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_byte_data()) {
      set_byte_data(from.byte_data());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_device_detail()) {
      mutable_device_detail()->::caffe2::DeviceOption::MergeFrom(from.device_detail());
    }
    if (from.has_segment()) {
      mutable_segment()->::caffe2::TensorProto_Segment::MergeFrom(from.segment());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProto::CopyFrom(const TensorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProto::IsInitialized() const {

  if (has_segment()) {
    if (!this->segment().IsInitialized()) return false;
  }
  return true;
}

void TensorProto::Swap(TensorProto* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(data_type_, other->data_type_);
    float_data_.Swap(&other->float_data_);
    int32_data_.Swap(&other->int32_data_);
    std::swap(byte_data_, other->byte_data_);
    string_data_.Swap(&other->string_data_);
    double_data_.Swap(&other->double_data_);
    int64_data_.Swap(&other->int64_data_);
    std::swap(name_, other->name_);
    std::swap(device_detail_, other->device_detail_);
    std::swap(segment_, other->segment_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProto_descriptor_;
  metadata.reflection = TensorProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QTensorProto::kDimsFieldNumber;
const int QTensorProto::kPrecisionFieldNumber;
const int QTensorProto::kScaleFieldNumber;
const int QTensorProto::kBiasFieldNumber;
const int QTensorProto::kIsSignedFieldNumber;
const int QTensorProto::kDataFieldNumber;
const int QTensorProto::kNameFieldNumber;
#endif  // !_MSC_VER

QTensorProto::QTensorProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QTensorProto::InitAsDefaultInstance() {
}

QTensorProto::QTensorProto(const QTensorProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QTensorProto::SharedCtor() {
  _cached_size_ = 0;
  precision_ = 0;
  scale_ = 0;
  bias_ = 0;
  is_signed_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QTensorProto::~QTensorProto() {
  SharedDtor();
}

void QTensorProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void QTensorProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QTensorProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QTensorProto_descriptor_;
}

const QTensorProto& QTensorProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

QTensorProto* QTensorProto::default_instance_ = NULL;

QTensorProto* QTensorProto::New() const {
  return new QTensorProto;
}

void QTensorProto::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    precision_ = 0;
    scale_ = 0;
    bias_ = 0;
    is_signed_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  dims_.Clear();
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QTensorProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectTag(16)) goto parse_precision;
        break;
      }

      // required int32 precision = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_precision:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &precision_)));
          set_has_precision();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_scale;
        break;
      }

      // required double scale = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_scale:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &scale_)));
          set_has_scale();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(33)) goto parse_bias;
        break;
      }

      // required double bias = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_bias:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &bias_)));
          set_has_bias();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_is_signed;
        break;
      }

      // required bool is_signed = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_signed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_signed_)));
          set_has_is_signed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated int32 data = 6 [packed = true];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 50, input, this->mutable_data())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_name;
        break;
      }

      // optional string name = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QTensorProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  // required int32 precision = 2;
  if (has_precision()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->precision(), output);
  }

  // required double scale = 3;
  if (has_scale()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->scale(), output);
  }

  // required double bias = 4;
  if (has_bias()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(4, this->bias(), output);
  }

  // required bool is_signed = 5;
  if (has_is_signed()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->is_signed(), output);
  }

  // repeated int32 data = 6 [packed = true];
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(6, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(_data_cached_byte_size_);
  }
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QTensorProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->dims(i), target);
  }

  // required int32 precision = 2;
  if (has_precision()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->precision(), target);
  }

  // required double scale = 3;
  if (has_scale()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->scale(), target);
  }

  // required double bias = 4;
  if (has_bias()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(4, this->bias(), target);
  }

  // required bool is_signed = 5;
  if (has_is_signed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->is_signed(), target);
  }

  // repeated int32 data = 6 [packed = true];
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      6,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
      _data_cached_byte_size_, target);
  }
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data(i), target);
  }

  // optional string name = 7;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QTensorProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 precision = 2;
    if (has_precision()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->precision());
    }

    // required double scale = 3;
    if (has_scale()) {
      total_size += 1 + 8;
    }

    // required double bias = 4;
    if (has_bias()) {
      total_size += 1 + 8;
    }

    // required bool is_signed = 5;
    if (has_is_signed()) {
      total_size += 1 + 1;
    }

    // optional string name = 7;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int64 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  // repeated int32 data = 6 [packed = true];
  {
    int data_size = 0;
    for (int i = 0; i < this->data_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->data(i));
    }
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(data_size);
    }
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = data_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QTensorProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QTensorProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QTensorProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QTensorProto::MergeFrom(const QTensorProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_precision()) {
      set_precision(from.precision());
    }
    if (from.has_scale()) {
      set_scale(from.scale());
    }
    if (from.has_bias()) {
      set_bias(from.bias());
    }
    if (from.has_is_signed()) {
      set_is_signed(from.is_signed());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QTensorProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QTensorProto::CopyFrom(const QTensorProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QTensorProto::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001e) != 0x0000001e) return false;

  return true;
}

void QTensorProto::Swap(QTensorProto* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(precision_, other->precision_);
    std::swap(scale_, other->scale_);
    std::swap(bias_, other->bias_);
    std::swap(is_signed_, other->is_signed_);
    data_.Swap(&other->data_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QTensorProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QTensorProto_descriptor_;
  metadata.reflection = QTensorProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TensorProtos::kProtosFieldNumber;
#endif  // !_MSC_VER

TensorProtos::TensorProtos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TensorProtos::InitAsDefaultInstance() {
}

TensorProtos::TensorProtos(const TensorProtos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TensorProtos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorProtos::~TensorProtos() {
  SharedDtor();
}

void TensorProtos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TensorProtos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorProtos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorProtos_descriptor_;
}

const TensorProtos& TensorProtos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorProtos* TensorProtos::default_instance_ = NULL;

TensorProtos* TensorProtos::New() const {
  return new TensorProtos;
}

void TensorProtos::Clear() {
  protos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorProtos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.TensorProto protos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_protos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_protos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_protos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TensorProtos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffe2.TensorProto protos = 1;
  for (int i = 0; i < this->protos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->protos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TensorProtos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffe2.TensorProto protos = 1;
  for (int i = 0; i < this->protos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->protos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TensorProtos::ByteSize() const {
  int total_size = 0;

  // repeated .caffe2.TensorProto protos = 1;
  total_size += 1 * this->protos_size();
  for (int i = 0; i < this->protos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->protos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorProtos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorProtos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorProtos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorProtos::MergeFrom(const TensorProtos& from) {
  GOOGLE_CHECK_NE(&from, this);
  protos_.MergeFrom(from.protos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorProtos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorProtos::CopyFrom(const TensorProtos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorProtos::IsInitialized() const {

  for (int i = 0; i < protos_size(); i++) {
    if (!this->protos(i).IsInitialized()) return false;
  }
  return true;
}

void TensorProtos::Swap(TensorProtos* other) {
  if (other != this) {
    protos_.Swap(&other->protos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorProtos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorProtos_descriptor_;
  metadata.reflection = TensorProtos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TensorShape::kDimsFieldNumber;
const int TensorShape::kDataTypeFieldNumber;
const int TensorShape::kUnknownDimsFieldNumber;
const int TensorShape::kUnknownShapeFieldNumber;
const int TensorShape::kNameFieldNumber;
#endif  // !_MSC_VER

TensorShape::TensorShape()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TensorShape::InitAsDefaultInstance() {
}

TensorShape::TensorShape(const TensorShape& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TensorShape::SharedCtor() {
  _cached_size_ = 0;
  data_type_ = 1;
  unknown_shape_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorShape::~TensorShape() {
  SharedDtor();
}

void TensorShape::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void TensorShape::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorShape::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorShape_descriptor_;
}

const TensorShape& TensorShape::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorShape* TensorShape::default_instance_ = NULL;

TensorShape* TensorShape::New() const {
  return new TensorShape;
}

void TensorShape::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    data_type_ = 1;
    unknown_shape_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  dims_.Clear();
  unknown_dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorShape::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 dims = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectTag(16)) goto parse_data_type;
        break;
      }

      // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_data_type:
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          if (::caffe2::TensorProto_DataType_IsValid(value)) {
            set_data_type(static_cast< ::caffe2::TensorProto_DataType >(value));
          } else {
            mutable_unknown_fields()->AddVarint(2, value);
          }
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unknown_dims;
        break;
      }

      // repeated int32 unknown_dims = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_unknown_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_unknown_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_unknown_dims;
        if (input->ExpectTag(32)) goto parse_unknown_shape;
        break;
      }

      // optional bool unknown_shape = 4 [default = false];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_unknown_shape:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &unknown_shape_)));
          set_has_unknown_shape();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TensorShape::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->dims(i), output);
  }

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      2, this->data_type(), output);
  }

  // repeated int32 unknown_dims = 3;
  for (int i = 0; i < this->unknown_dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->unknown_dims(i), output);
  }

  // optional bool unknown_shape = 4 [default = false];
  if (has_unknown_shape()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->unknown_shape(), output);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TensorShape::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->dims(i), target);
  }

  // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
  if (has_data_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      2, this->data_type(), target);
  }

  // repeated int32 unknown_dims = 3;
  for (int i = 0; i < this->unknown_dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->unknown_dims(i), target);
  }

  // optional bool unknown_shape = 4 [default = false];
  if (has_unknown_shape()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->unknown_shape(), target);
  }

  // optional string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TensorShape::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .caffe2.TensorProto.DataType data_type = 2 [default = FLOAT];
    if (has_data_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::EnumSize(this->data_type());
    }

    // optional bool unknown_shape = 4 [default = false];
    if (has_unknown_shape()) {
      total_size += 1 + 1;
    }

    // optional string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int64 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  // repeated int32 unknown_dims = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->unknown_dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->unknown_dims(i));
    }
    total_size += 1 * this->unknown_dims_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorShape::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorShape* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorShape*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorShape::MergeFrom(const TensorShape& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  unknown_dims_.MergeFrom(from.unknown_dims_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_data_type()) {
      set_data_type(from.data_type());
    }
    if (from.has_unknown_shape()) {
      set_unknown_shape(from.unknown_shape());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorShape::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShape::CopyFrom(const TensorShape& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShape::IsInitialized() const {

  return true;
}

void TensorShape::Swap(TensorShape* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(data_type_, other->data_type_);
    unknown_dims_.Swap(&other->unknown_dims_);
    std::swap(unknown_shape_, other->unknown_shape_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorShape::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorShape_descriptor_;
  metadata.reflection = TensorShape_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TensorShapes::kShapesFieldNumber;
#endif  // !_MSC_VER

TensorShapes::TensorShapes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TensorShapes::InitAsDefaultInstance() {
}

TensorShapes::TensorShapes(const TensorShapes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TensorShapes::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TensorShapes::~TensorShapes() {
  SharedDtor();
}

void TensorShapes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TensorShapes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TensorShapes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TensorShapes_descriptor_;
}

const TensorShapes& TensorShapes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

TensorShapes* TensorShapes::default_instance_ = NULL;

TensorShapes* TensorShapes::New() const {
  return new TensorShapes;
}

void TensorShapes::Clear() {
  shapes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TensorShapes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.TensorShape shapes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shapes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_shapes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_shapes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TensorShapes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffe2.TensorShape shapes = 1;
  for (int i = 0; i < this->shapes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->shapes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TensorShapes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffe2.TensorShape shapes = 1;
  for (int i = 0; i < this->shapes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->shapes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TensorShapes::ByteSize() const {
  int total_size = 0;

  // repeated .caffe2.TensorShape shapes = 1;
  total_size += 1 * this->shapes_size();
  for (int i = 0; i < this->shapes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->shapes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TensorShapes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TensorShapes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TensorShapes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TensorShapes::MergeFrom(const TensorShapes& from) {
  GOOGLE_CHECK_NE(&from, this);
  shapes_.MergeFrom(from.shapes_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TensorShapes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TensorShapes::CopyFrom(const TensorShapes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TensorShapes::IsInitialized() const {

  return true;
}

void TensorShapes::Swap(TensorShapes* other) {
  if (other != this) {
    shapes_.Swap(&other->shapes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TensorShapes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TensorShapes_descriptor_;
  metadata.reflection = TensorShapes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Argument::kNameFieldNumber;
const int Argument::kFFieldNumber;
const int Argument::kIFieldNumber;
const int Argument::kSFieldNumber;
const int Argument::kNFieldNumber;
const int Argument::kFloatsFieldNumber;
const int Argument::kIntsFieldNumber;
const int Argument::kStringsFieldNumber;
const int Argument::kNetsFieldNumber;
#endif  // !_MSC_VER

Argument::Argument()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Argument::InitAsDefaultInstance() {
  n_ = const_cast< ::caffe2::NetDef*>(&::caffe2::NetDef::default_instance());
}

Argument::Argument(const Argument& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Argument::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  f_ = 0;
  i_ = GOOGLE_LONGLONG(0);
  s_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  n_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Argument::~Argument() {
  SharedDtor();
}

void Argument::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (s_ != &::google::protobuf::internal::kEmptyString) {
    delete s_;
  }
  if (this != default_instance_) {
    delete n_;
  }
}

void Argument::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Argument::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Argument_descriptor_;
}

const Argument& Argument::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

Argument* Argument::default_instance_ = NULL;

Argument* Argument::New() const {
  return new Argument;
}

void Argument::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    f_ = 0;
    i_ = GOOGLE_LONGLONG(0);
    if (has_s()) {
      if (s_ != &::google::protobuf::internal::kEmptyString) {
        s_->clear();
      }
    }
    if (has_n()) {
      if (n_ != NULL) n_->::caffe2::NetDef::Clear();
    }
  }
  floats_.Clear();
  ints_.Clear();
  strings_.Clear();
  nets_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Argument::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_f;
        break;
      }

      // optional float f = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_f:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &f_)));
          set_has_f();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_i;
        break;
      }

      // optional int64 i = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_i:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &i_)));
          set_has_i();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_s;
        break;
      }

      // optional bytes s = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_s:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_s()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_floats;
        break;
      }

      // repeated float floats = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_floats:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_floats())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_floats())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_floats;
        if (input->ExpectTag(48)) goto parse_ints;
        break;
      }

      // repeated int64 ints = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 48, input, this->mutable_ints())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_ints())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ints;
        if (input->ExpectTag(58)) goto parse_strings;
        break;
      }

      // repeated bytes strings = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_strings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->add_strings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_strings;
        if (input->ExpectTag(66)) goto parse_n;
        break;
      }

      // optional .caffe2.NetDef n = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_n:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_n()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_nets;
        break;
      }

      // repeated .caffe2.NetDef nets = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_nets;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Argument::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional float f = 2;
  if (has_f()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->f(), output);
  }

  // optional int64 i = 3;
  if (has_i()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->i(), output);
  }

  // optional bytes s = 4;
  if (has_s()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->s(), output);
  }

  // repeated float floats = 5;
  for (int i = 0; i < this->floats_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->floats(i), output);
  }

  // repeated int64 ints = 6;
  for (int i = 0; i < this->ints_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      6, this->ints(i), output);
  }

  // repeated bytes strings = 7;
  for (int i = 0; i < this->strings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->strings(i), output);
  }

  // optional .caffe2.NetDef n = 8;
  if (has_n()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->n(), output);
  }

  // repeated .caffe2.NetDef nets = 9;
  for (int i = 0; i < this->nets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->nets(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Argument::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional float f = 2;
  if (has_f()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->f(), target);
  }

  // optional int64 i = 3;
  if (has_i()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->i(), target);
  }

  // optional bytes s = 4;
  if (has_s()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->s(), target);
  }

  // repeated float floats = 5;
  for (int i = 0; i < this->floats_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->floats(i), target);
  }

  // repeated int64 ints = 6;
  for (int i = 0; i < this->ints_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(6, this->ints(i), target);
  }

  // repeated bytes strings = 7;
  for (int i = 0; i < this->strings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBytesToArray(7, this->strings(i), target);
  }

  // optional .caffe2.NetDef n = 8;
  if (has_n()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->n(), target);
  }

  // repeated .caffe2.NetDef nets = 9;
  for (int i = 0; i < this->nets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->nets(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Argument::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional float f = 2;
    if (has_f()) {
      total_size += 1 + 4;
    }

    // optional int64 i = 3;
    if (has_i()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->i());
    }

    // optional bytes s = 4;
    if (has_s()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->s());
    }

    // optional .caffe2.NetDef n = 8;
    if (has_n()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->n());
    }

  }
  // repeated float floats = 5;
  {
    int data_size = 0;
    data_size = 4 * this->floats_size();
    total_size += 1 * this->floats_size() + data_size;
  }

  // repeated int64 ints = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->ints_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->ints(i));
    }
    total_size += 1 * this->ints_size() + data_size;
  }

  // repeated bytes strings = 7;
  total_size += 1 * this->strings_size();
  for (int i = 0; i < this->strings_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::BytesSize(
      this->strings(i));
  }

  // repeated .caffe2.NetDef nets = 9;
  total_size += 1 * this->nets_size();
  for (int i = 0; i < this->nets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nets(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Argument::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Argument* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Argument*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Argument::MergeFrom(const Argument& from) {
  GOOGLE_CHECK_NE(&from, this);
  floats_.MergeFrom(from.floats_);
  ints_.MergeFrom(from.ints_);
  strings_.MergeFrom(from.strings_);
  nets_.MergeFrom(from.nets_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_f()) {
      set_f(from.f());
    }
    if (from.has_i()) {
      set_i(from.i());
    }
    if (from.has_s()) {
      set_s(from.s());
    }
    if (from.has_n()) {
      mutable_n()->::caffe2::NetDef::MergeFrom(from.n());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Argument::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Argument::CopyFrom(const Argument& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Argument::IsInitialized() const {

  return true;
}

void Argument::Swap(Argument* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(f_, other->f_);
    std::swap(i_, other->i_);
    std::swap(s_, other->s_);
    std::swap(n_, other->n_);
    floats_.Swap(&other->floats_);
    ints_.Swap(&other->ints_);
    strings_.Swap(&other->strings_);
    nets_.Swap(&other->nets_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Argument::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Argument_descriptor_;
  metadata.reflection = Argument_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeviceOption::kDeviceTypeFieldNumber;
const int DeviceOption::kCudaGpuIdFieldNumber;
const int DeviceOption::kRandomSeedFieldNumber;
const int DeviceOption::kNodeNameFieldNumber;
const int DeviceOption::kNumaNodeIdFieldNumber;
#endif  // !_MSC_VER

DeviceOption::DeviceOption()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeviceOption::InitAsDefaultInstance() {
}

DeviceOption::DeviceOption(const DeviceOption& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeviceOption::SharedCtor() {
  _cached_size_ = 0;
  device_type_ = 0;
  cuda_gpu_id_ = 0;
  random_seed_ = 0u;
  node_name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  numa_node_id_ = -1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeviceOption::~DeviceOption() {
  SharedDtor();
}

void DeviceOption::SharedDtor() {
  if (node_name_ != &::google::protobuf::internal::kEmptyString) {
    delete node_name_;
  }
  if (this != default_instance_) {
  }
}

void DeviceOption::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeviceOption::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeviceOption_descriptor_;
}

const DeviceOption& DeviceOption::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

DeviceOption* DeviceOption::default_instance_ = NULL;

DeviceOption* DeviceOption::New() const {
  return new DeviceOption;
}

void DeviceOption::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    device_type_ = 0;
    cuda_gpu_id_ = 0;
    random_seed_ = 0u;
    if (has_node_name()) {
      if (node_name_ != &::google::protobuf::internal::kEmptyString) {
        node_name_->clear();
      }
    }
    numa_node_id_ = -1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeviceOption::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 device_type = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &device_type_)));
          set_has_device_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cuda_gpu_id;
        break;
      }

      // optional int32 cuda_gpu_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cuda_gpu_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cuda_gpu_id_)));
          set_has_cuda_gpu_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_random_seed;
        break;
      }

      // optional uint32 random_seed = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_random_seed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &random_seed_)));
          set_has_random_seed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_node_name;
        break;
      }

      // optional string node_name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_node_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_node_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->node_name().data(), this->node_name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numa_node_id;
        break;
      }

      // optional int32 numa_node_id = 5 [default = -1];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numa_node_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numa_node_id_)));
          set_has_numa_node_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeviceOption::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 device_type = 1 [default = 0];
  if (has_device_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->device_type(), output);
  }

  // optional int32 cuda_gpu_id = 2;
  if (has_cuda_gpu_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cuda_gpu_id(), output);
  }

  // optional uint32 random_seed = 3;
  if (has_random_seed()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->random_seed(), output);
  }

  // optional string node_name = 4;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->node_name(), output);
  }

  // optional int32 numa_node_id = 5 [default = -1];
  if (has_numa_node_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numa_node_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeviceOption::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 device_type = 1 [default = 0];
  if (has_device_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->device_type(), target);
  }

  // optional int32 cuda_gpu_id = 2;
  if (has_cuda_gpu_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cuda_gpu_id(), target);
  }

  // optional uint32 random_seed = 3;
  if (has_random_seed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->random_seed(), target);
  }

  // optional string node_name = 4;
  if (has_node_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->node_name().data(), this->node_name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->node_name(), target);
  }

  // optional int32 numa_node_id = 5 [default = -1];
  if (has_numa_node_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numa_node_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeviceOption::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 device_type = 1 [default = 0];
    if (has_device_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->device_type());
    }

    // optional int32 cuda_gpu_id = 2;
    if (has_cuda_gpu_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cuda_gpu_id());
    }

    // optional uint32 random_seed = 3;
    if (has_random_seed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->random_seed());
    }

    // optional string node_name = 4;
    if (has_node_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->node_name());
    }

    // optional int32 numa_node_id = 5 [default = -1];
    if (has_numa_node_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numa_node_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeviceOption::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeviceOption* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeviceOption*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeviceOption::MergeFrom(const DeviceOption& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_device_type()) {
      set_device_type(from.device_type());
    }
    if (from.has_cuda_gpu_id()) {
      set_cuda_gpu_id(from.cuda_gpu_id());
    }
    if (from.has_random_seed()) {
      set_random_seed(from.random_seed());
    }
    if (from.has_node_name()) {
      set_node_name(from.node_name());
    }
    if (from.has_numa_node_id()) {
      set_numa_node_id(from.numa_node_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeviceOption::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeviceOption::CopyFrom(const DeviceOption& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeviceOption::IsInitialized() const {

  return true;
}

void DeviceOption::Swap(DeviceOption* other) {
  if (other != this) {
    std::swap(device_type_, other->device_type_);
    std::swap(cuda_gpu_id_, other->cuda_gpu_id_);
    std::swap(random_seed_, other->random_seed_);
    std::swap(node_name_, other->node_name_);
    std::swap(numa_node_id_, other->numa_node_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeviceOption::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeviceOption_descriptor_;
  metadata.reflection = DeviceOption_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OperatorDef::kInputFieldNumber;
const int OperatorDef::kOutputFieldNumber;
const int OperatorDef::kNameFieldNumber;
const int OperatorDef::kTypeFieldNumber;
const int OperatorDef::kArgFieldNumber;
const int OperatorDef::kDeviceOptionFieldNumber;
const int OperatorDef::kEngineFieldNumber;
const int OperatorDef::kControlInputFieldNumber;
const int OperatorDef::kIsGradientOpFieldNumber;
const int OperatorDef::kDebugInfoFieldNumber;
#endif  // !_MSC_VER

OperatorDef::OperatorDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OperatorDef::InitAsDefaultInstance() {
  device_option_ = const_cast< ::caffe2::DeviceOption*>(&::caffe2::DeviceOption::default_instance());
}

OperatorDef::OperatorDef(const OperatorDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OperatorDef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  device_option_ = NULL;
  engine_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  is_gradient_op_ = false;
  debug_info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OperatorDef::~OperatorDef() {
  SharedDtor();
}

void OperatorDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (engine_ != &::google::protobuf::internal::kEmptyString) {
    delete engine_;
  }
  if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
    delete debug_info_;
  }
  if (this != default_instance_) {
    delete device_option_;
  }
}

void OperatorDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OperatorDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OperatorDef_descriptor_;
}

const OperatorDef& OperatorDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

OperatorDef* OperatorDef::default_instance_ = NULL;

OperatorDef* OperatorDef::New() const {
  return new OperatorDef;
}

void OperatorDef::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_device_option()) {
      if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
    }
    if (has_engine()) {
      if (engine_ != &::google::protobuf::internal::kEmptyString) {
        engine_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    is_gradient_op_ = false;
    if (has_debug_info()) {
      if (debug_info_ != &::google::protobuf::internal::kEmptyString) {
        debug_info_->clear();
      }
    }
  }
  input_.Clear();
  output_.Clear();
  arg_.Clear();
  control_input_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OperatorDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->input(this->input_size() - 1).data(),
            this->input(this->input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_input;
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // repeated string output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->output(this->output_size() - 1).data(),
            this->output(this->output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_type;
        break;
      }

      // optional string type = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arg;
        break;
      }

      // repeated .caffe2.Argument arg = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_arg;
        if (input->ExpectTag(50)) goto parse_device_option;
        break;
      }

      // optional .caffe2.DeviceOption device_option = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_engine;
        break;
      }

      // optional string engine = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_engine:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_engine()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->engine().data(), this->engine().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_control_input;
        break;
      }

      // repeated string control_input = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_control_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_control_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->control_input(this->control_input_size() - 1).data(),
            this->control_input(this->control_input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_control_input;
        if (input->ExpectTag(72)) goto parse_is_gradient_op;
        break;
      }

      // optional bool is_gradient_op = 9 [default = false];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_gradient_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &is_gradient_op_)));
          set_has_is_gradient_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_debug_info;
        break;
      }

      // optional string debug_info = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_debug_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_debug_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->debug_info().data(), this->debug_info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OperatorDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string input = 1;
  for (int i = 0; i < this->input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->input(i).data(), this->input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->input(i), output);
  }

  // repeated string output = 2;
  for (int i = 0; i < this->output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->output(i).data(), this->output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->output(i), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->type(), output);
  }

  // repeated .caffe2.Argument arg = 5;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->arg(i), output);
  }

  // optional .caffe2.DeviceOption device_option = 6;
  if (has_device_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->device_option(), output);
  }

  // optional string engine = 7;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->engine().data(), this->engine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->engine(), output);
  }

  // repeated string control_input = 8;
  for (int i = 0; i < this->control_input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->control_input(i).data(), this->control_input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->control_input(i), output);
  }

  // optional bool is_gradient_op = 9 [default = false];
  if (has_is_gradient_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->is_gradient_op(), output);
  }

  // optional string debug_info = 10;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->debug_info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OperatorDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string input = 1;
  for (int i = 0; i < this->input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->input(i).data(), this->input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->input(i), target);
  }

  // repeated string output = 2;
  for (int i = 0; i < this->output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->output(i).data(), this->output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->output(i), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional string type = 4;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->type(), target);
  }

  // repeated .caffe2.Argument arg = 5;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->arg(i), target);
  }

  // optional .caffe2.DeviceOption device_option = 6;
  if (has_device_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->device_option(), target);
  }

  // optional string engine = 7;
  if (has_engine()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->engine().data(), this->engine().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->engine(), target);
  }

  // repeated string control_input = 8;
  for (int i = 0; i < this->control_input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->control_input(i).data(), this->control_input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->control_input(i), target);
  }

  // optional bool is_gradient_op = 9 [default = false];
  if (has_is_gradient_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->is_gradient_op(), target);
  }

  // optional string debug_info = 10;
  if (has_debug_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->debug_info().data(), this->debug_info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->debug_info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OperatorDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 4;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe2.DeviceOption device_option = 6;
    if (has_device_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_option());
    }

    // optional string engine = 7;
    if (has_engine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->engine());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool is_gradient_op = 9 [default = false];
    if (has_is_gradient_op()) {
      total_size += 1 + 1;
    }

    // optional string debug_info = 10;
    if (has_debug_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->debug_info());
    }

  }
  // repeated string input = 1;
  total_size += 1 * this->input_size();
  for (int i = 0; i < this->input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->input(i));
  }

  // repeated string output = 2;
  total_size += 1 * this->output_size();
  for (int i = 0; i < this->output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->output(i));
  }

  // repeated .caffe2.Argument arg = 5;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }

  // repeated string control_input = 8;
  total_size += 1 * this->control_input_size();
  for (int i = 0; i < this->control_input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->control_input(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OperatorDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OperatorDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OperatorDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OperatorDef::MergeFrom(const OperatorDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  input_.MergeFrom(from.input_);
  output_.MergeFrom(from.output_);
  arg_.MergeFrom(from.arg_);
  control_input_.MergeFrom(from.control_input_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_device_option()) {
      mutable_device_option()->::caffe2::DeviceOption::MergeFrom(from.device_option());
    }
    if (from.has_engine()) {
      set_engine(from.engine());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_is_gradient_op()) {
      set_is_gradient_op(from.is_gradient_op());
    }
    if (from.has_debug_info()) {
      set_debug_info(from.debug_info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OperatorDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OperatorDef::CopyFrom(const OperatorDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OperatorDef::IsInitialized() const {

  return true;
}

void OperatorDef::Swap(OperatorDef* other) {
  if (other != this) {
    input_.Swap(&other->input_);
    output_.Swap(&other->output_);
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    arg_.Swap(&other->arg_);
    std::swap(device_option_, other->device_option_);
    std::swap(engine_, other->engine_);
    control_input_.Swap(&other->control_input_);
    std::swap(is_gradient_op_, other->is_gradient_op_);
    std::swap(debug_info_, other->debug_info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OperatorDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OperatorDef_descriptor_;
  metadata.reflection = OperatorDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetDef::kNameFieldNumber;
const int NetDef::kOpFieldNumber;
const int NetDef::kTypeFieldNumber;
const int NetDef::kNumWorkersFieldNumber;
const int NetDef::kDeviceOptionFieldNumber;
const int NetDef::kArgFieldNumber;
const int NetDef::kExternalInputFieldNumber;
const int NetDef::kExternalOutputFieldNumber;
#endif  // !_MSC_VER

NetDef::NetDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetDef::InitAsDefaultInstance() {
  device_option_ = const_cast< ::caffe2::DeviceOption*>(&::caffe2::DeviceOption::default_instance());
}

NetDef::NetDef(const NetDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetDef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_workers_ = 0;
  device_option_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetDef::~NetDef() {
  SharedDtor();
}

void NetDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (this != default_instance_) {
    delete device_option_;
  }
}

void NetDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetDef_descriptor_;
}

const NetDef& NetDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

NetDef* NetDef::default_instance_ = NULL;

NetDef* NetDef::New() const {
  return new NetDef;
}

void NetDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    num_workers_ = 0;
    if (has_device_option()) {
      if (device_option_ != NULL) device_option_->::caffe2::DeviceOption::Clear();
    }
  }
  op_.Clear();
  arg_.Clear();
  external_input_.Clear();
  external_output_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_op;
        break;
      }

      // repeated .caffe2.OperatorDef op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_op:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_op()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_op;
        if (input->ExpectTag(26)) goto parse_type;
        break;
      }

      // optional string type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num_workers;
        break;
      }

      // optional int32 num_workers = 4 [deprecated = true];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_workers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_workers_)));
          set_has_num_workers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_device_option;
        break;
      }

      // optional .caffe2.DeviceOption device_option = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_device_option:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_device_option()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_arg;
        break;
      }

      // repeated .caffe2.Argument arg = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_arg()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_arg;
        if (input->ExpectTag(58)) goto parse_external_input;
        break;
      }

      // repeated string external_input = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_input:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_external_input()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_input(this->external_input_size() - 1).data(),
            this->external_input(this->external_input_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_external_input;
        if (input->ExpectTag(66)) goto parse_external_output;
        break;
      }

      // repeated string external_output = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_external_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_external_output()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->external_output(this->external_output_size() - 1).data(),
            this->external_output(this->external_output_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_external_output;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .caffe2.OperatorDef op = 2;
  for (int i = 0; i < this->op_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->op(i), output);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->type(), output);
  }

  // optional int32 num_workers = 4 [deprecated = true];
  if (has_num_workers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num_workers(), output);
  }

  // optional .caffe2.DeviceOption device_option = 5;
  if (has_device_option()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->device_option(), output);
  }

  // repeated .caffe2.Argument arg = 6;
  for (int i = 0; i < this->arg_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->arg(i), output);
  }

  // repeated string external_input = 7;
  for (int i = 0; i < this->external_input_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->external_input(i).data(), this->external_input(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->external_input(i), output);
  }

  // repeated string external_output = 8;
  for (int i = 0; i < this->external_output_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->external_output(i).data(), this->external_output(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->external_output(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.OperatorDef op = 2;
  for (int i = 0; i < this->op_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->op(i), target);
  }

  // optional string type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->type(), target);
  }

  // optional int32 num_workers = 4 [deprecated = true];
  if (has_num_workers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num_workers(), target);
  }

  // optional .caffe2.DeviceOption device_option = 5;
  if (has_device_option()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->device_option(), target);
  }

  // repeated .caffe2.Argument arg = 6;
  for (int i = 0; i < this->arg_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->arg(i), target);
  }

  // repeated string external_input = 7;
  for (int i = 0; i < this->external_input_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_input(i).data(), this->external_input(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(7, this->external_input(i), target);
  }

  // repeated string external_output = 8;
  for (int i = 0; i < this->external_output_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->external_output(i).data(), this->external_output(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(8, this->external_output(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional int32 num_workers = 4 [deprecated = true];
    if (has_num_workers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_workers());
    }

    // optional .caffe2.DeviceOption device_option = 5;
    if (has_device_option()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->device_option());
    }

  }
  // repeated .caffe2.OperatorDef op = 2;
  total_size += 1 * this->op_size();
  for (int i = 0; i < this->op_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->op(i));
  }

  // repeated .caffe2.Argument arg = 6;
  total_size += 1 * this->arg_size();
  for (int i = 0; i < this->arg_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->arg(i));
  }

  // repeated string external_input = 7;
  total_size += 1 * this->external_input_size();
  for (int i = 0; i < this->external_input_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->external_input(i));
  }

  // repeated string external_output = 8;
  total_size += 1 * this->external_output_size();
  for (int i = 0; i < this->external_output_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->external_output(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetDef::MergeFrom(const NetDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  op_.MergeFrom(from.op_);
  arg_.MergeFrom(from.arg_);
  external_input_.MergeFrom(from.external_input_);
  external_output_.MergeFrom(from.external_output_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_num_workers()) {
      set_num_workers(from.num_workers());
    }
    if (from.has_device_option()) {
      mutable_device_option()->::caffe2::DeviceOption::MergeFrom(from.device_option());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetDef::CopyFrom(const NetDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetDef::IsInitialized() const {

  return true;
}

void NetDef::Swap(NetDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    op_.Swap(&other->op_);
    std::swap(type_, other->type_);
    std::swap(num_workers_, other->num_workers_);
    std::swap(device_option_, other->device_option_);
    arg_.Swap(&other->arg_);
    external_input_.Swap(&other->external_input_);
    external_output_.Swap(&other->external_output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetDef_descriptor_;
  metadata.reflection = NetDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExecutionStep::kNameFieldNumber;
const int ExecutionStep::kSubstepFieldNumber;
const int ExecutionStep::kNetworkFieldNumber;
const int ExecutionStep::kNumIterFieldNumber;
const int ExecutionStep::kCriteriaNetworkFieldNumber;
const int ExecutionStep::kReportNetFieldNumber;
const int ExecutionStep::kReportIntervalFieldNumber;
const int ExecutionStep::kRunEveryMsFieldNumber;
const int ExecutionStep::kConcurrentSubstepsFieldNumber;
const int ExecutionStep::kShouldStopBlobFieldNumber;
const int ExecutionStep::kOnlyOnceFieldNumber;
const int ExecutionStep::kCreateWorkspaceFieldNumber;
const int ExecutionStep::kNumConcurrentInstancesFieldNumber;
#endif  // !_MSC_VER

ExecutionStep::ExecutionStep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExecutionStep::InitAsDefaultInstance() {
}

ExecutionStep::ExecutionStep(const ExecutionStep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExecutionStep::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_iter_ = GOOGLE_LONGLONG(0);
  criteria_network_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  report_net_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  report_interval_ = 0;
  run_every_ms_ = GOOGLE_LONGLONG(0);
  concurrent_substeps_ = false;
  should_stop_blob_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  only_once_ = false;
  create_workspace_ = false;
  num_concurrent_instances_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExecutionStep::~ExecutionStep() {
  SharedDtor();
}

void ExecutionStep::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (criteria_network_ != &::google::protobuf::internal::kEmptyString) {
    delete criteria_network_;
  }
  if (report_net_ != &::google::protobuf::internal::kEmptyString) {
    delete report_net_;
  }
  if (should_stop_blob_ != &::google::protobuf::internal::kEmptyString) {
    delete should_stop_blob_;
  }
  if (this != default_instance_) {
  }
}

void ExecutionStep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExecutionStep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExecutionStep_descriptor_;
}

const ExecutionStep& ExecutionStep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

ExecutionStep* ExecutionStep::default_instance_ = NULL;

ExecutionStep* ExecutionStep::New() const {
  return new ExecutionStep;
}

void ExecutionStep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    num_iter_ = GOOGLE_LONGLONG(0);
    if (has_criteria_network()) {
      if (criteria_network_ != &::google::protobuf::internal::kEmptyString) {
        criteria_network_->clear();
      }
    }
    if (has_report_net()) {
      if (report_net_ != &::google::protobuf::internal::kEmptyString) {
        report_net_->clear();
      }
    }
    report_interval_ = 0;
    run_every_ms_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    concurrent_substeps_ = false;
    if (has_should_stop_blob()) {
      if (should_stop_blob_ != &::google::protobuf::internal::kEmptyString) {
        should_stop_blob_->clear();
      }
    }
    only_once_ = false;
    create_workspace_ = false;
    num_concurrent_instances_ = 0;
  }
  substep_.Clear();
  network_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExecutionStep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_substep;
        break;
      }

      // repeated .caffe2.ExecutionStep substep = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_substep:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_substep()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_substep;
        if (input->ExpectTag(26)) goto parse_network;
        break;
      }

      // repeated string network = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->network(this->network_size() - 1).data(),
            this->network(this->network_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_network;
        if (input->ExpectTag(32)) goto parse_num_iter;
        break;
      }

      // optional int64 num_iter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_iter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_iter_)));
          set_has_num_iter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_criteria_network;
        break;
      }

      // optional string criteria_network = 5 [deprecated = true];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_criteria_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_criteria_network()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->criteria_network().data(), this->criteria_network().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_concurrent_substeps;
        break;
      }

      // optional bool concurrent_substeps = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_concurrent_substeps:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &concurrent_substeps_)));
          set_has_concurrent_substeps();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_report_net;
        break;
      }

      // optional string report_net = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_report_net:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_report_net()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->report_net().data(), this->report_net().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_report_interval;
        break;
      }

      // optional int32 report_interval = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_report_interval:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &report_interval_)));
          set_has_report_interval();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_should_stop_blob;
        break;
      }

      // optional string should_stop_blob = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_should_stop_blob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_should_stop_blob()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->should_stop_blob().data(), this->should_stop_blob().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_only_once;
        break;
      }

      // optional bool only_once = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only_once:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &only_once_)));
          set_has_only_once();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_run_every_ms;
        break;
      }

      // optional int64 run_every_ms = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_run_every_ms:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &run_every_ms_)));
          set_has_run_every_ms();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_create_workspace;
        break;
      }

      // optional bool create_workspace = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_create_workspace:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &create_workspace_)));
          set_has_create_workspace();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_num_concurrent_instances;
        break;
      }

      // optional int32 num_concurrent_instances = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num_concurrent_instances:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_concurrent_instances_)));
          set_has_num_concurrent_instances();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExecutionStep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .caffe2.ExecutionStep substep = 2;
  for (int i = 0; i < this->substep_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->substep(i), output);
  }

  // repeated string network = 3;
  for (int i = 0; i < this->network_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->network(i).data(), this->network(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->network(i), output);
  }

  // optional int64 num_iter = 4;
  if (has_num_iter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->num_iter(), output);
  }

  // optional string criteria_network = 5 [deprecated = true];
  if (has_criteria_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->criteria_network().data(), this->criteria_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->criteria_network(), output);
  }

  // optional bool concurrent_substeps = 6;
  if (has_concurrent_substeps()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->concurrent_substeps(), output);
  }

  // optional string report_net = 7;
  if (has_report_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->report_net().data(), this->report_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->report_net(), output);
  }

  // optional int32 report_interval = 8;
  if (has_report_interval()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->report_interval(), output);
  }

  // optional string should_stop_blob = 9;
  if (has_should_stop_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->should_stop_blob().data(), this->should_stop_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->should_stop_blob(), output);
  }

  // optional bool only_once = 10;
  if (has_only_once()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->only_once(), output);
  }

  // optional int64 run_every_ms = 11;
  if (has_run_every_ms()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->run_every_ms(), output);
  }

  // optional bool create_workspace = 12;
  if (has_create_workspace()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->create_workspace(), output);
  }

  // optional int32 num_concurrent_instances = 13;
  if (has_num_concurrent_instances()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->num_concurrent_instances(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExecutionStep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.ExecutionStep substep = 2;
  for (int i = 0; i < this->substep_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->substep(i), target);
  }

  // repeated string network = 3;
  for (int i = 0; i < this->network_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->network(i).data(), this->network(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(3, this->network(i), target);
  }

  // optional int64 num_iter = 4;
  if (has_num_iter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->num_iter(), target);
  }

  // optional string criteria_network = 5 [deprecated = true];
  if (has_criteria_network()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->criteria_network().data(), this->criteria_network().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->criteria_network(), target);
  }

  // optional bool concurrent_substeps = 6;
  if (has_concurrent_substeps()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->concurrent_substeps(), target);
  }

  // optional string report_net = 7;
  if (has_report_net()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->report_net().data(), this->report_net().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->report_net(), target);
  }

  // optional int32 report_interval = 8;
  if (has_report_interval()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->report_interval(), target);
  }

  // optional string should_stop_blob = 9;
  if (has_should_stop_blob()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->should_stop_blob().data(), this->should_stop_blob().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->should_stop_blob(), target);
  }

  // optional bool only_once = 10;
  if (has_only_once()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->only_once(), target);
  }

  // optional int64 run_every_ms = 11;
  if (has_run_every_ms()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->run_every_ms(), target);
  }

  // optional bool create_workspace = 12;
  if (has_create_workspace()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->create_workspace(), target);
  }

  // optional int32 num_concurrent_instances = 13;
  if (has_num_concurrent_instances()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->num_concurrent_instances(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExecutionStep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 num_iter = 4;
    if (has_num_iter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num_iter());
    }

    // optional string criteria_network = 5 [deprecated = true];
    if (has_criteria_network()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->criteria_network());
    }

    // optional string report_net = 7;
    if (has_report_net()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->report_net());
    }

    // optional int32 report_interval = 8;
    if (has_report_interval()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->report_interval());
    }

    // optional int64 run_every_ms = 11;
    if (has_run_every_ms()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->run_every_ms());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool concurrent_substeps = 6;
    if (has_concurrent_substeps()) {
      total_size += 1 + 1;
    }

    // optional string should_stop_blob = 9;
    if (has_should_stop_blob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->should_stop_blob());
    }

    // optional bool only_once = 10;
    if (has_only_once()) {
      total_size += 1 + 1;
    }

    // optional bool create_workspace = 12;
    if (has_create_workspace()) {
      total_size += 1 + 1;
    }

    // optional int32 num_concurrent_instances = 13;
    if (has_num_concurrent_instances()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num_concurrent_instances());
    }

  }
  // repeated .caffe2.ExecutionStep substep = 2;
  total_size += 1 * this->substep_size();
  for (int i = 0; i < this->substep_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->substep(i));
  }

  // repeated string network = 3;
  total_size += 1 * this->network_size();
  for (int i = 0; i < this->network_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->network(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExecutionStep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExecutionStep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExecutionStep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExecutionStep::MergeFrom(const ExecutionStep& from) {
  GOOGLE_CHECK_NE(&from, this);
  substep_.MergeFrom(from.substep_);
  network_.MergeFrom(from.network_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_num_iter()) {
      set_num_iter(from.num_iter());
    }
    if (from.has_criteria_network()) {
      set_criteria_network(from.criteria_network());
    }
    if (from.has_report_net()) {
      set_report_net(from.report_net());
    }
    if (from.has_report_interval()) {
      set_report_interval(from.report_interval());
    }
    if (from.has_run_every_ms()) {
      set_run_every_ms(from.run_every_ms());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_concurrent_substeps()) {
      set_concurrent_substeps(from.concurrent_substeps());
    }
    if (from.has_should_stop_blob()) {
      set_should_stop_blob(from.should_stop_blob());
    }
    if (from.has_only_once()) {
      set_only_once(from.only_once());
    }
    if (from.has_create_workspace()) {
      set_create_workspace(from.create_workspace());
    }
    if (from.has_num_concurrent_instances()) {
      set_num_concurrent_instances(from.num_concurrent_instances());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExecutionStep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExecutionStep::CopyFrom(const ExecutionStep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExecutionStep::IsInitialized() const {

  return true;
}

void ExecutionStep::Swap(ExecutionStep* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    substep_.Swap(&other->substep_);
    network_.Swap(&other->network_);
    std::swap(num_iter_, other->num_iter_);
    std::swap(criteria_network_, other->criteria_network_);
    std::swap(report_net_, other->report_net_);
    std::swap(report_interval_, other->report_interval_);
    std::swap(run_every_ms_, other->run_every_ms_);
    std::swap(concurrent_substeps_, other->concurrent_substeps_);
    std::swap(should_stop_blob_, other->should_stop_blob_);
    std::swap(only_once_, other->only_once_);
    std::swap(create_workspace_, other->create_workspace_);
    std::swap(num_concurrent_instances_, other->num_concurrent_instances_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExecutionStep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExecutionStep_descriptor_;
  metadata.reflection = ExecutionStep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlanDef::kNameFieldNumber;
const int PlanDef::kNetworkFieldNumber;
const int PlanDef::kExecutionStepFieldNumber;
#endif  // !_MSC_VER

PlanDef::PlanDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlanDef::InitAsDefaultInstance() {
}

PlanDef::PlanDef(const PlanDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlanDef::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlanDef::~PlanDef() {
  SharedDtor();
}

void PlanDef::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlanDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlanDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlanDef_descriptor_;
}

const PlanDef& PlanDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

PlanDef* PlanDef::default_instance_ = NULL;

PlanDef* PlanDef::New() const {
  return new PlanDef;
}

void PlanDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  network_.Clear();
  execution_step_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlanDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network;
        break;
      }

      // repeated .caffe2.NetDef network = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_network:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_network()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_network;
        if (input->ExpectTag(26)) goto parse_execution_step;
        break;
      }

      // repeated .caffe2.ExecutionStep execution_step = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_execution_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_execution_step()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_execution_step;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlanDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // repeated .caffe2.NetDef network = 2;
  for (int i = 0; i < this->network_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->network(i), output);
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  for (int i = 0; i < this->execution_step_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->execution_step(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlanDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // repeated .caffe2.NetDef network = 2;
  for (int i = 0; i < this->network_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->network(i), target);
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  for (int i = 0; i < this->execution_step_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->execution_step(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlanDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .caffe2.NetDef network = 2;
  total_size += 1 * this->network_size();
  for (int i = 0; i < this->network_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->network(i));
  }

  // repeated .caffe2.ExecutionStep execution_step = 3;
  total_size += 1 * this->execution_step_size();
  for (int i = 0; i < this->execution_step_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->execution_step(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlanDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlanDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlanDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlanDef::MergeFrom(const PlanDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  network_.MergeFrom(from.network_);
  execution_step_.MergeFrom(from.execution_step_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlanDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlanDef::CopyFrom(const PlanDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlanDef::IsInitialized() const {

  return true;
}

void PlanDef::Swap(PlanDef* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    network_.Swap(&other->network_);
    execution_step_.Swap(&other->execution_step_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlanDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlanDef_descriptor_;
  metadata.reflection = PlanDef_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobProto::kNameFieldNumber;
const int BlobProto::kTypeFieldNumber;
const int BlobProto::kTensorFieldNumber;
const int BlobProto::kContentFieldNumber;
const int BlobProto::kQtensorFieldNumber;
const int BlobProto::kContentNumChunksFieldNumber;
const int BlobProto::kContentChunkIdFieldNumber;
#endif  // !_MSC_VER

BlobProto::BlobProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobProto::InitAsDefaultInstance() {
  tensor_ = const_cast< ::caffe2::TensorProto*>(&::caffe2::TensorProto::default_instance());
  qtensor_ = const_cast< ::caffe2::QTensorProto*>(&::caffe2::QTensorProto::default_instance());
}

BlobProto::BlobProto(const BlobProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  tensor_ = NULL;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qtensor_ = NULL;
  content_num_chunks_ = 0;
  content_chunk_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobProto::~BlobProto() {
  SharedDtor();
}

void BlobProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (type_ != &::google::protobuf::internal::kEmptyString) {
    delete type_;
  }
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
    delete tensor_;
    delete qtensor_;
  }
}

void BlobProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobProto_descriptor_;
}

const BlobProto& BlobProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

BlobProto* BlobProto::default_instance_ = NULL;

BlobProto* BlobProto::New() const {
  return new BlobProto;
}

void BlobProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_type()) {
      if (type_ != &::google::protobuf::internal::kEmptyString) {
        type_->clear();
      }
    }
    if (has_tensor()) {
      if (tensor_ != NULL) tensor_->::caffe2::TensorProto::Clear();
    }
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
    if (has_qtensor()) {
      if (qtensor_ != NULL) qtensor_->::caffe2::QTensorProto::Clear();
    }
    content_num_chunks_ = 0;
    content_chunk_id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_type;
        break;
      }

      // optional string type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->type().data(), this->type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_tensor;
        break;
      }

      // optional .caffe2.TensorProto tensor = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_tensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_tensor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_content;
        break;
      }

      // optional bytes content = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_qtensor;
        break;
      }

      // optional .caffe2.QTensorProto qtensor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qtensor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qtensor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_content_num_chunks;
        break;
      }

      // optional int32 content_num_chunks = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_num_chunks:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_num_chunks_)));
          set_has_content_num_chunks();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_content_chunk_id;
        break;
      }

      // optional int32 content_chunk_id = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_content_chunk_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &content_chunk_id_)));
          set_has_content_chunk_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->type(), output);
  }

  // optional .caffe2.TensorProto tensor = 3;
  if (has_tensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->tensor(), output);
  }

  // optional bytes content = 4;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->content(), output);
  }

  // optional .caffe2.QTensorProto qtensor = 5;
  if (has_qtensor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->qtensor(), output);
  }

  // optional int32 content_num_chunks = 6;
  if (has_content_num_chunks()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->content_num_chunks(), output);
  }

  // optional int32 content_chunk_id = 7;
  if (has_content_chunk_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->content_chunk_id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->type().data(), this->type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->type(), target);
  }

  // optional .caffe2.TensorProto tensor = 3;
  if (has_tensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->tensor(), target);
  }

  // optional bytes content = 4;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->content(), target);
  }

  // optional .caffe2.QTensorProto qtensor = 5;
  if (has_qtensor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->qtensor(), target);
  }

  // optional int32 content_num_chunks = 6;
  if (has_content_num_chunks()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->content_num_chunks(), target);
  }

  // optional int32 content_chunk_id = 7;
  if (has_content_chunk_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->content_chunk_id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->type());
    }

    // optional .caffe2.TensorProto tensor = 3;
    if (has_tensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->tensor());
    }

    // optional bytes content = 4;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

    // optional .caffe2.QTensorProto qtensor = 5;
    if (has_qtensor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qtensor());
    }

    // optional int32 content_num_chunks = 6;
    if (has_content_num_chunks()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_num_chunks());
    }

    // optional int32 content_chunk_id = 7;
    if (has_content_chunk_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->content_chunk_id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobProto::MergeFrom(const BlobProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_tensor()) {
      mutable_tensor()->::caffe2::TensorProto::MergeFrom(from.tensor());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
    if (from.has_qtensor()) {
      mutable_qtensor()->::caffe2::QTensorProto::MergeFrom(from.qtensor());
    }
    if (from.has_content_num_chunks()) {
      set_content_num_chunks(from.content_num_chunks());
    }
    if (from.has_content_chunk_id()) {
      set_content_chunk_id(from.content_chunk_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobProto::CopyFrom(const BlobProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobProto::IsInitialized() const {

  if (has_tensor()) {
    if (!this->tensor().IsInitialized()) return false;
  }
  if (has_qtensor()) {
    if (!this->qtensor().IsInitialized()) return false;
  }
  return true;
}

void BlobProto::Swap(BlobProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(type_, other->type_);
    std::swap(tensor_, other->tensor_);
    std::swap(content_, other->content_);
    std::swap(qtensor_, other->qtensor_);
    std::swap(content_num_chunks_, other->content_num_chunks_);
    std::swap(content_chunk_id_, other->content_chunk_id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobProto_descriptor_;
  metadata.reflection = BlobProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBReaderProto::kNameFieldNumber;
const int DBReaderProto::kSourceFieldNumber;
const int DBReaderProto::kDbTypeFieldNumber;
const int DBReaderProto::kKeyFieldNumber;
#endif  // !_MSC_VER

DBReaderProto::DBReaderProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBReaderProto::InitAsDefaultInstance() {
}

DBReaderProto::DBReaderProto(const DBReaderProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBReaderProto::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  db_type_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBReaderProto::~DBReaderProto() {
  SharedDtor();
}

void DBReaderProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (db_type_ != &::google::protobuf::internal::kEmptyString) {
    delete db_type_;
  }
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void DBReaderProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBReaderProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBReaderProto_descriptor_;
}

const DBReaderProto& DBReaderProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

DBReaderProto* DBReaderProto::default_instance_ = NULL;

DBReaderProto* DBReaderProto::New() const {
  return new DBReaderProto;
}

void DBReaderProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    if (has_db_type()) {
      if (db_type_ != &::google::protobuf::internal::kEmptyString) {
        db_type_->clear();
      }
    }
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBReaderProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_source;
        break;
      }

      // optional string source = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_db_type;
        break;
      }

      // optional string db_type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_db_type:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_db_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->db_type().data(), this->db_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_key;
        break;
      }

      // optional string key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_key:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBReaderProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->name(), output);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->source(), output);
  }

  // optional string db_type = 3;
  if (has_db_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_type().data(), this->db_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->db_type(), output);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBReaderProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // optional string source = 2;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->source(), target);
  }

  // optional string db_type = 3;
  if (has_db_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->db_type().data(), this->db_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->db_type(), target);
  }

  // optional string key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBReaderProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional string source = 2;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional string db_type = 3;
    if (has_db_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->db_type());
    }

    // optional string key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBReaderProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBReaderProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBReaderProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBReaderProto::MergeFrom(const DBReaderProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_db_type()) {
      set_db_type(from.db_type());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBReaderProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBReaderProto::CopyFrom(const DBReaderProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBReaderProto::IsInitialized() const {

  return true;
}

void DBReaderProto::Swap(DBReaderProto* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(source_, other->source_);
    std::swap(db_type_, other->db_type_);
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBReaderProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBReaderProto_descriptor_;
  metadata.reflection = DBReaderProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InputInfo::kDimsFieldNumber;
#endif  // !_MSC_VER

InputInfo::InputInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InputInfo::InitAsDefaultInstance() {
}

InputInfo::InputInfo(const InputInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InputInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InputInfo::~InputInfo() {
  SharedDtor();
}

void InputInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InputInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InputInfo_descriptor_;
}

const InputInfo& InputInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

InputInfo* InputInfo::default_instance_ = NULL;

InputInfo* InputInfo::New() const {
  return new InputInfo;
}

void InputInfo::Clear() {
  dims_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated uint32 dims = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dims:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 8, input, this->mutable_dims())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_dims())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_dims;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated uint32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      1, this->dims(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InputInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated uint32 dims = 1;
  for (int i = 0; i < this->dims_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(1, this->dims(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InputInfo::ByteSize() const {
  int total_size = 0;

  // repeated uint32 dims = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->dims_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->dims(i));
    }
    total_size += 1 * this->dims_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InputInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InputInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InputInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InputInfo::MergeFrom(const InputInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  dims_.MergeFrom(from.dims_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InputInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InputInfo::CopyFrom(const InputInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InputInfo::IsInitialized() const {

  return true;
}

void InputInfo::Swap(InputInfo* other) {
  if (other != this) {
    dims_.Swap(&other->dims_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InputInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InputInfo_descriptor_;
  metadata.reflection = InputInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OutputInfo::kLabelsFieldNumber;
#endif  // !_MSC_VER

OutputInfo::OutputInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OutputInfo::InitAsDefaultInstance() {
}

OutputInfo::OutputInfo(const OutputInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OutputInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OutputInfo::~OutputInfo() {
  SharedDtor();
}

void OutputInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OutputInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OutputInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OutputInfo_descriptor_;
}

const OutputInfo& OutputInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

OutputInfo* OutputInfo::default_instance_ = NULL;

OutputInfo* OutputInfo::New() const {
  return new OutputInfo;
}

void OutputInfo::Clear() {
  labels_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OutputInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string labels = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_labels:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_labels()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->labels(this->labels_size() - 1).data(),
            this->labels(this->labels_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_labels;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OutputInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->labels(i).data(), this->labels(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->labels(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OutputInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string labels = 1;
  for (int i = 0; i < this->labels_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->labels(i).data(), this->labels(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->labels(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OutputInfo::ByteSize() const {
  int total_size = 0;

  // repeated string labels = 1;
  total_size += 1 * this->labels_size();
  for (int i = 0; i < this->labels_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->labels(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OutputInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OutputInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OutputInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OutputInfo::MergeFrom(const OutputInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  labels_.MergeFrom(from.labels_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OutputInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OutputInfo::CopyFrom(const OutputInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OutputInfo::IsInitialized() const {

  return true;
}

void OutputInfo::Swap(OutputInfo* other) {
  if (other != this) {
    labels_.Swap(&other->labels_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OutputInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OutputInfo_descriptor_;
  metadata.reflection = OutputInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelMeta::kInputFieldNumber;
const int ModelMeta::kOutputFieldNumber;
#endif  // !_MSC_VER

ModelMeta::ModelMeta()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelMeta::InitAsDefaultInstance() {
  input_ = const_cast< ::caffe2::InputInfo*>(&::caffe2::InputInfo::default_instance());
  output_ = const_cast< ::caffe2::OutputInfo*>(&::caffe2::OutputInfo::default_instance());
}

ModelMeta::ModelMeta(const ModelMeta& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelMeta::SharedCtor() {
  _cached_size_ = 0;
  input_ = NULL;
  output_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelMeta::~ModelMeta() {
  SharedDtor();
}

void ModelMeta::SharedDtor() {
  if (this != default_instance_) {
    delete input_;
    delete output_;
  }
}

void ModelMeta::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelMeta::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelMeta_descriptor_;
}

const ModelMeta& ModelMeta::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

ModelMeta* ModelMeta::default_instance_ = NULL;

ModelMeta* ModelMeta::New() const {
  return new ModelMeta;
}

void ModelMeta::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_input()) {
      if (input_ != NULL) input_->::caffe2::InputInfo::Clear();
    }
    if (has_output()) {
      if (output_ != NULL) output_->::caffe2::OutputInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelMeta::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe2.InputInfo input = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_input()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_output;
        break;
      }

      // optional .caffe2.OutputInfo output = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_output:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_output()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelMeta::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffe2.InputInfo input = 1;
  if (has_input()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->input(), output);
  }

  // optional .caffe2.OutputInfo output = 2;
  if (has_output()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->output(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelMeta::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffe2.InputInfo input = 1;
  if (has_input()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->input(), target);
  }

  // optional .caffe2.OutputInfo output = 2;
  if (has_output()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->output(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelMeta::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe2.InputInfo input = 1;
    if (has_input()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->input());
    }

    // optional .caffe2.OutputInfo output = 2;
    if (has_output()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->output());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelMeta::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelMeta* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelMeta*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelMeta::MergeFrom(const ModelMeta& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_input()) {
      mutable_input()->::caffe2::InputInfo::MergeFrom(from.input());
    }
    if (from.has_output()) {
      mutable_output()->::caffe2::OutputInfo::MergeFrom(from.output());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelMeta::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelMeta::CopyFrom(const ModelMeta& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelMeta::IsInitialized() const {

  return true;
}

void ModelMeta::Swap(ModelMeta* other) {
  if (other != this) {
    std::swap(input_, other->input_);
    std::swap(output_, other->output_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelMeta::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelMeta_descriptor_;
  metadata.reflection = ModelMeta_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ModelDef::kMetaFieldNumber;
const int ModelDef::kInitFieldNumber;
const int ModelDef::kPredictFieldNumber;
#endif  // !_MSC_VER

ModelDef::ModelDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelDef::InitAsDefaultInstance() {
  meta_ = const_cast< ::caffe2::ModelMeta*>(&::caffe2::ModelMeta::default_instance());
  init_ = const_cast< ::caffe2::NetDef*>(&::caffe2::NetDef::default_instance());
  predict_ = const_cast< ::caffe2::NetDef*>(&::caffe2::NetDef::default_instance());
}

ModelDef::ModelDef(const ModelDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelDef::SharedCtor() {
  _cached_size_ = 0;
  meta_ = NULL;
  init_ = NULL;
  predict_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelDef::~ModelDef() {
  SharedDtor();
}

void ModelDef::SharedDtor() {
  if (this != default_instance_) {
    delete meta_;
    delete init_;
    delete predict_;
  }
}

void ModelDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelDef_descriptor_;
}

const ModelDef& ModelDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_caffe2_2eproto();
  return *default_instance_;
}

ModelDef* ModelDef::default_instance_ = NULL;

ModelDef* ModelDef::New() const {
  return new ModelDef;
}

void ModelDef::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_meta()) {
      if (meta_ != NULL) meta_->::caffe2::ModelMeta::Clear();
    }
    if (has_init()) {
      if (init_ != NULL) init_->::caffe2::NetDef::Clear();
    }
    if (has_predict()) {
      if (predict_ != NULL) predict_->::caffe2::NetDef::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe2.ModelMeta meta = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meta()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_init;
        break;
      }

      // optional .caffe2.NetDef init = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_init:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_init()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_predict;
        break;
      }

      // optional .caffe2.NetDef predict = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predict:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_predict()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffe2.ModelMeta meta = 1;
  if (has_meta()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->meta(), output);
  }

  // optional .caffe2.NetDef init = 2;
  if (has_init()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->init(), output);
  }

  // optional .caffe2.NetDef predict = 3;
  if (has_predict()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->predict(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffe2.ModelMeta meta = 1;
  if (has_meta()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->meta(), target);
  }

  // optional .caffe2.NetDef init = 2;
  if (has_init()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->init(), target);
  }

  // optional .caffe2.NetDef predict = 3;
  if (has_predict()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->predict(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe2.ModelMeta meta = 1;
    if (has_meta()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meta());
    }

    // optional .caffe2.NetDef init = 2;
    if (has_init()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->init());
    }

    // optional .caffe2.NetDef predict = 3;
    if (has_predict()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->predict());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelDef::MergeFrom(const ModelDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta()) {
      mutable_meta()->::caffe2::ModelMeta::MergeFrom(from.meta());
    }
    if (from.has_init()) {
      mutable_init()->::caffe2::NetDef::MergeFrom(from.init());
    }
    if (from.has_predict()) {
      mutable_predict()->::caffe2::NetDef::MergeFrom(from.predict());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelDef::CopyFrom(const ModelDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelDef::IsInitialized() const {

  return true;
}

void ModelDef::Swap(ModelDef* other) {
  if (other != this) {
    std::swap(meta_, other->meta_);
    std::swap(init_, other->init_);
    std::swap(predict_, other->predict_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelDef_descriptor_;
  metadata.reflection = ModelDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
