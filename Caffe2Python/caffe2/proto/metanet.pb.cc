// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: metanet.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "metanet.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* ModelInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ModelInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlobsMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlobsMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* NetsMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NetsMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlansMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlansMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* StringMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StringMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* MetaNetDef_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MetaNetDef_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_metanet_2eproto() {
  protobuf_AddDesc_metanet_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "metanet.proto");
  GOOGLE_CHECK(file != NULL);
  ModelInfo_descriptor_ = file->message_type(0);
  static const int ModelInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, project_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, modelclass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, predictortype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, modelid_),
  };
  ModelInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ModelInfo_descriptor_,
      ModelInfo::default_instance_,
      ModelInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ModelInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ModelInfo));
  BlobsMap_descriptor_ = file->message_type(1);
  static const int BlobsMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, value_),
  };
  BlobsMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlobsMap_descriptor_,
      BlobsMap::default_instance_,
      BlobsMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlobsMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlobsMap));
  NetsMap_descriptor_ = file->message_type(2);
  static const int NetsMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, value_),
  };
  NetsMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NetsMap_descriptor_,
      NetsMap::default_instance_,
      NetsMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NetsMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NetsMap));
  PlansMap_descriptor_ = file->message_type(3);
  static const int PlansMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, value_),
  };
  PlansMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlansMap_descriptor_,
      PlansMap::default_instance_,
      PlansMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlansMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlansMap));
  StringMap_descriptor_ = file->message_type(4);
  static const int StringMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, value_),
  };
  StringMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StringMap_descriptor_,
      StringMap::default_instance_,
      StringMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StringMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StringMap));
  MetaNetDef_descriptor_ = file->message_type(5);
  static const int MetaNetDef_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, blobs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, nets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, modelinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, plans_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, applicationspecificinfo_),
  };
  MetaNetDef_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MetaNetDef_descriptor_,
      MetaNetDef::default_instance_,
      MetaNetDef_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MetaNetDef, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MetaNetDef));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_metanet_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ModelInfo_descriptor_, &ModelInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlobsMap_descriptor_, &BlobsMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NetsMap_descriptor_, &NetsMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlansMap_descriptor_, &PlansMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StringMap_descriptor_, &StringMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MetaNetDef_descriptor_, &MetaNetDef::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_metanet_2eproto() {
  delete ModelInfo::default_instance_;
  delete ModelInfo_reflection_;
  delete ModelInfo::_default_predictortype_;
  delete BlobsMap::default_instance_;
  delete BlobsMap_reflection_;
  delete NetsMap::default_instance_;
  delete NetsMap_reflection_;
  delete PlansMap::default_instance_;
  delete PlansMap_reflection_;
  delete StringMap::default_instance_;
  delete StringMap_reflection_;
  delete MetaNetDef::default_instance_;
  delete MetaNetDef_reflection_;
}

void protobuf_AddDesc_metanet_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::caffe2::protobuf_AddDesc_caffe2_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rmetanet.proto\022\006caffe2\032\014caffe2.proto\"{\n"
    "\tModelInfo\022\017\n\007project\030\001 \001(\t\022\022\n\nmodelClas"
    "s\030\002 \001(\t\022\017\n\007version\030\003 \001(\t\022\'\n\rpredictorTyp"
    "e\030\004 \001(\t:\020SINGLE_PREDICTOR\022\017\n\007modelId\030\005 \001"
    "(\t\"&\n\010BlobsMap\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \003"
    "(\t\"5\n\007NetsMap\022\013\n\003key\030\001 \002(\t\022\035\n\005value\030\002 \002("
    "\0132\016.caffe2.NetDef\"7\n\010PlansMap\022\013\n\003key\030\001 \002"
    "(\t\022\036\n\005value\030\002 \002(\0132\017.caffe2.PlanDef\"\'\n\tSt"
    "ringMap\022\013\n\003key\030\001 \002(\t\022\r\n\005value\030\002 \002(\t\"\307\001\n\n"
    "MetaNetDef\022\037\n\005blobs\030\001 \003(\0132\020.caffe2.Blobs"
    "Map\022\035\n\004nets\030\002 \003(\0132\017.caffe2.NetsMap\022$\n\tmo"
    "delInfo\030\003 \001(\0132\021.caffe2.ModelInfo\022\037\n\005plan"
    "s\030\004 \003(\0132\020.caffe2.PlansMap\0222\n\027application"
    "SpecificInfo\030\005 \003(\0132\021.caffe2.StringMap", 557);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "metanet.proto", &protobuf_RegisterTypes);
  ModelInfo::_default_predictortype_ =
      new ::std::string("SINGLE_PREDICTOR", 16);
  ModelInfo::default_instance_ = new ModelInfo();
  BlobsMap::default_instance_ = new BlobsMap();
  NetsMap::default_instance_ = new NetsMap();
  PlansMap::default_instance_ = new PlansMap();
  StringMap::default_instance_ = new StringMap();
  MetaNetDef::default_instance_ = new MetaNetDef();
  ModelInfo::default_instance_->InitAsDefaultInstance();
  BlobsMap::default_instance_->InitAsDefaultInstance();
  NetsMap::default_instance_->InitAsDefaultInstance();
  PlansMap::default_instance_->InitAsDefaultInstance();
  StringMap::default_instance_->InitAsDefaultInstance();
  MetaNetDef::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_metanet_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_metanet_2eproto {
  StaticDescriptorInitializer_metanet_2eproto() {
    protobuf_AddDesc_metanet_2eproto();
  }
} static_descriptor_initializer_metanet_2eproto_;

// ===================================================================

::std::string* ModelInfo::_default_predictortype_ = NULL;
#ifndef _MSC_VER
const int ModelInfo::kProjectFieldNumber;
const int ModelInfo::kModelClassFieldNumber;
const int ModelInfo::kVersionFieldNumber;
const int ModelInfo::kPredictorTypeFieldNumber;
const int ModelInfo::kModelIdFieldNumber;
#endif  // !_MSC_VER

ModelInfo::ModelInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ModelInfo::InitAsDefaultInstance() {
}

ModelInfo::ModelInfo(const ModelInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ModelInfo::SharedCtor() {
  _cached_size_ = 0;
  project_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  modelclass_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  predictortype_ = const_cast< ::std::string*>(_default_predictortype_);
  modelid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ModelInfo::~ModelInfo() {
  SharedDtor();
}

void ModelInfo::SharedDtor() {
  if (project_ != &::google::protobuf::internal::kEmptyString) {
    delete project_;
  }
  if (modelclass_ != &::google::protobuf::internal::kEmptyString) {
    delete modelclass_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (predictortype_ != _default_predictortype_) {
    delete predictortype_;
  }
  if (modelid_ != &::google::protobuf::internal::kEmptyString) {
    delete modelid_;
  }
  if (this != default_instance_) {
  }
}

void ModelInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ModelInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ModelInfo_descriptor_;
}

const ModelInfo& ModelInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

ModelInfo* ModelInfo::default_instance_ = NULL;

ModelInfo* ModelInfo::New() const {
  return new ModelInfo;
}

void ModelInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_project()) {
      if (project_ != &::google::protobuf::internal::kEmptyString) {
        project_->clear();
      }
    }
    if (has_modelclass()) {
      if (modelclass_ != &::google::protobuf::internal::kEmptyString) {
        modelclass_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_predictortype()) {
      if (predictortype_ != _default_predictortype_) {
        predictortype_->assign(*_default_predictortype_);
      }
    }
    if (has_modelid()) {
      if (modelid_ != &::google::protobuf::internal::kEmptyString) {
        modelid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ModelInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string project = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_project()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->project().data(), this->project().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_modelClass;
        break;
      }

      // optional string modelClass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelClass:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelclass()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelclass().data(), this->modelclass().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_version;
        break;
      }

      // optional string version = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_predictorType;
        break;
      }

      // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_predictorType:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predictortype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predictortype().data(), this->predictortype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_modelId;
        break;
      }

      // optional string modelId = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelId:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_modelid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->modelid().data(), this->modelid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ModelInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->project(), output);
  }

  // optional string modelClass = 2;
  if (has_modelclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelclass().data(), this->modelclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->modelclass(), output);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->version(), output);
  }

  // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
  if (has_predictortype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predictortype().data(), this->predictortype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->predictortype(), output);
  }

  // optional string modelId = 5;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->modelid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ModelInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string project = 1;
  if (has_project()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->project().data(), this->project().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->project(), target);
  }

  // optional string modelClass = 2;
  if (has_modelclass()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelclass().data(), this->modelclass().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->modelclass(), target);
  }

  // optional string version = 3;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->version(), target);
  }

  // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
  if (has_predictortype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predictortype().data(), this->predictortype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->predictortype(), target);
  }

  // optional string modelId = 5;
  if (has_modelid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->modelid().data(), this->modelid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->modelid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ModelInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string project = 1;
    if (has_project()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->project());
    }

    // optional string modelClass = 2;
    if (has_modelclass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelclass());
    }

    // optional string version = 3;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // optional string predictorType = 4 [default = "SINGLE_PREDICTOR"];
    if (has_predictortype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predictortype());
    }

    // optional string modelId = 5;
    if (has_modelid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->modelid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ModelInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ModelInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ModelInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ModelInfo::MergeFrom(const ModelInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_project()) {
      set_project(from.project());
    }
    if (from.has_modelclass()) {
      set_modelclass(from.modelclass());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_predictortype()) {
      set_predictortype(from.predictortype());
    }
    if (from.has_modelid()) {
      set_modelid(from.modelid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ModelInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ModelInfo::CopyFrom(const ModelInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModelInfo::IsInitialized() const {

  return true;
}

void ModelInfo::Swap(ModelInfo* other) {
  if (other != this) {
    std::swap(project_, other->project_);
    std::swap(modelclass_, other->modelclass_);
    std::swap(version_, other->version_);
    std::swap(predictortype_, other->predictortype_);
    std::swap(modelid_, other->modelid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ModelInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ModelInfo_descriptor_;
  metadata.reflection = ModelInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlobsMap::kKeyFieldNumber;
const int BlobsMap::kValueFieldNumber;
#endif  // !_MSC_VER

BlobsMap::BlobsMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlobsMap::InitAsDefaultInstance() {
}

BlobsMap::BlobsMap(const BlobsMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlobsMap::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlobsMap::~BlobsMap() {
  SharedDtor();
}

void BlobsMap::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
  }
}

void BlobsMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlobsMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlobsMap_descriptor_;
}

const BlobsMap& BlobsMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

BlobsMap* BlobsMap::default_instance_ = NULL;

BlobsMap* BlobsMap::New() const {
  return new BlobsMap;
}

void BlobsMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
  }
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlobsMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // repeated string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value(this->value_size() - 1).data(),
            this->value(this->value_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlobsMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->value(i).data(), this->value(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlobsMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // repeated string value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value(i).data(), this->value(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlobsMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

  }
  // repeated string value = 2;
  total_size += 1 * this->value_size();
  for (int i = 0; i < this->value_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->value(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlobsMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlobsMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlobsMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlobsMap::MergeFrom(const BlobsMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  value_.MergeFrom(from.value_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlobsMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlobsMap::CopyFrom(const BlobsMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlobsMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BlobsMap::Swap(BlobsMap* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlobsMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlobsMap_descriptor_;
  metadata.reflection = BlobsMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NetsMap::kKeyFieldNumber;
const int NetsMap::kValueFieldNumber;
#endif  // !_MSC_VER

NetsMap::NetsMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NetsMap::InitAsDefaultInstance() {
  value_ = const_cast< ::caffe2::NetDef*>(&::caffe2::NetDef::default_instance());
}

NetsMap::NetsMap(const NetsMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NetsMap::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NetsMap::~NetsMap() {
  SharedDtor();
}

void NetsMap::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void NetsMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NetsMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NetsMap_descriptor_;
}

const NetsMap& NetsMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

NetsMap* NetsMap::default_instance_ = NULL;

NetsMap* NetsMap::New() const {
  return new NetsMap;
}

void NetsMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::caffe2::NetDef::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NetsMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .caffe2.NetDef value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NetsMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required .caffe2.NetDef value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NetsMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .caffe2.NetDef value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NetsMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .caffe2.NetDef value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NetsMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NetsMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NetsMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NetsMap::MergeFrom(const NetsMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::caffe2::NetDef::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NetsMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NetsMap::CopyFrom(const NetsMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NetsMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void NetsMap::Swap(NetsMap* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NetsMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NetsMap_descriptor_;
  metadata.reflection = NetsMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlansMap::kKeyFieldNumber;
const int PlansMap::kValueFieldNumber;
#endif  // !_MSC_VER

PlansMap::PlansMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlansMap::InitAsDefaultInstance() {
  value_ = const_cast< ::caffe2::PlanDef*>(&::caffe2::PlanDef::default_instance());
}

PlansMap::PlansMap(const PlansMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlansMap::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlansMap::~PlansMap() {
  SharedDtor();
}

void PlansMap::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (this != default_instance_) {
    delete value_;
  }
}

void PlansMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlansMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlansMap_descriptor_;
}

const PlansMap& PlansMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

PlansMap* PlansMap::default_instance_ = NULL;

PlansMap* PlansMap::New() const {
  return new PlansMap;
}

void PlansMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != NULL) value_->::caffe2::PlanDef::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlansMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required .caffe2.PlanDef value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_value()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlansMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required .caffe2.PlanDef value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlansMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required .caffe2.PlanDef value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlansMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required .caffe2.PlanDef value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlansMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlansMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlansMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlansMap::MergeFrom(const PlansMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      mutable_value()->::caffe2::PlanDef::MergeFrom(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlansMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlansMap::CopyFrom(const PlansMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlansMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void PlansMap::Swap(PlansMap* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlansMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlansMap_descriptor_;
  metadata.reflection = PlansMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StringMap::kKeyFieldNumber;
const int StringMap::kValueFieldNumber;
#endif  // !_MSC_VER

StringMap::StringMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StringMap::InitAsDefaultInstance() {
}

StringMap::StringMap(const StringMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StringMap::SharedCtor() {
  _cached_size_ = 0;
  key_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StringMap::~StringMap() {
  SharedDtor();
}

void StringMap::SharedDtor() {
  if (key_ != &::google::protobuf::internal::kEmptyString) {
    delete key_;
  }
  if (value_ != &::google::protobuf::internal::kEmptyString) {
    delete value_;
  }
  if (this != default_instance_) {
  }
}

void StringMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StringMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StringMap_descriptor_;
}

const StringMap& StringMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

StringMap* StringMap::default_instance_ = NULL;

StringMap* StringMap::New() const {
  return new StringMap;
}

void StringMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_key()) {
      if (key_ != &::google::protobuf::internal::kEmptyString) {
        key_->clear();
      }
    }
    if (has_value()) {
      if (value_ != &::google::protobuf::internal::kEmptyString) {
        value_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StringMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_key()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->key().data(), this->key().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_value;
        break;
      }

      // required string value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_value:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_value()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->value().data(), this->value().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StringMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->key(), output);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StringMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->key().data(), this->key().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->key(), target);
  }

  // required string value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->value().data(), this->value().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StringMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->key());
    }

    // required string value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StringMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StringMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StringMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StringMap::MergeFrom(const StringMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StringMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StringMap::CopyFrom(const StringMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StringMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void StringMap::Swap(StringMap* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StringMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StringMap_descriptor_;
  metadata.reflection = StringMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MetaNetDef::kBlobsFieldNumber;
const int MetaNetDef::kNetsFieldNumber;
const int MetaNetDef::kModelInfoFieldNumber;
const int MetaNetDef::kPlansFieldNumber;
const int MetaNetDef::kApplicationSpecificInfoFieldNumber;
#endif  // !_MSC_VER

MetaNetDef::MetaNetDef()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MetaNetDef::InitAsDefaultInstance() {
  modelinfo_ = const_cast< ::caffe2::ModelInfo*>(&::caffe2::ModelInfo::default_instance());
}

MetaNetDef::MetaNetDef(const MetaNetDef& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MetaNetDef::SharedCtor() {
  _cached_size_ = 0;
  modelinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MetaNetDef::~MetaNetDef() {
  SharedDtor();
}

void MetaNetDef::SharedDtor() {
  if (this != default_instance_) {
    delete modelinfo_;
  }
}

void MetaNetDef::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MetaNetDef::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MetaNetDef_descriptor_;
}

const MetaNetDef& MetaNetDef::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_metanet_2eproto();
  return *default_instance_;
}

MetaNetDef* MetaNetDef::default_instance_ = NULL;

MetaNetDef* MetaNetDef::New() const {
  return new MetaNetDef;
}

void MetaNetDef::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (has_modelinfo()) {
      if (modelinfo_ != NULL) modelinfo_->::caffe2::ModelInfo::Clear();
    }
  }
  blobs_.Clear();
  nets_.Clear();
  plans_.Clear();
  applicationspecificinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MetaNetDef::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.BlobsMap blobs = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blobs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_blobs()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_blobs;
        if (input->ExpectTag(18)) goto parse_nets;
        break;
      }

      // repeated .caffe2.NetsMap nets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nets:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_nets()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_nets;
        if (input->ExpectTag(26)) goto parse_modelInfo;
        break;
      }

      // optional .caffe2.ModelInfo modelInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_modelInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_modelinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plans;
        break;
      }

      // repeated .caffe2.PlansMap plans = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_plans:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_plans()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_plans;
        if (input->ExpectTag(42)) goto parse_applicationSpecificInfo;
        break;
      }

      // repeated .caffe2.StringMap applicationSpecificInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_applicationSpecificInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_applicationspecificinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_applicationSpecificInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MetaNetDef::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffe2.BlobsMap blobs = 1;
  for (int i = 0; i < this->blobs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->blobs(i), output);
  }

  // repeated .caffe2.NetsMap nets = 2;
  for (int i = 0; i < this->nets_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->nets(i), output);
  }

  // optional .caffe2.ModelInfo modelInfo = 3;
  if (has_modelinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->modelinfo(), output);
  }

  // repeated .caffe2.PlansMap plans = 4;
  for (int i = 0; i < this->plans_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->plans(i), output);
  }

  // repeated .caffe2.StringMap applicationSpecificInfo = 5;
  for (int i = 0; i < this->applicationspecificinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->applicationspecificinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MetaNetDef::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffe2.BlobsMap blobs = 1;
  for (int i = 0; i < this->blobs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->blobs(i), target);
  }

  // repeated .caffe2.NetsMap nets = 2;
  for (int i = 0; i < this->nets_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->nets(i), target);
  }

  // optional .caffe2.ModelInfo modelInfo = 3;
  if (has_modelinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->modelinfo(), target);
  }

  // repeated .caffe2.PlansMap plans = 4;
  for (int i = 0; i < this->plans_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->plans(i), target);
  }

  // repeated .caffe2.StringMap applicationSpecificInfo = 5;
  for (int i = 0; i < this->applicationspecificinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->applicationspecificinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MetaNetDef::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional .caffe2.ModelInfo modelInfo = 3;
    if (has_modelinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->modelinfo());
    }

  }
  // repeated .caffe2.BlobsMap blobs = 1;
  total_size += 1 * this->blobs_size();
  for (int i = 0; i < this->blobs_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->blobs(i));
  }

  // repeated .caffe2.NetsMap nets = 2;
  total_size += 1 * this->nets_size();
  for (int i = 0; i < this->nets_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->nets(i));
  }

  // repeated .caffe2.PlansMap plans = 4;
  total_size += 1 * this->plans_size();
  for (int i = 0; i < this->plans_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->plans(i));
  }

  // repeated .caffe2.StringMap applicationSpecificInfo = 5;
  total_size += 1 * this->applicationspecificinfo_size();
  for (int i = 0; i < this->applicationspecificinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->applicationspecificinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MetaNetDef::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MetaNetDef* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MetaNetDef*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MetaNetDef::MergeFrom(const MetaNetDef& from) {
  GOOGLE_CHECK_NE(&from, this);
  blobs_.MergeFrom(from.blobs_);
  nets_.MergeFrom(from.nets_);
  plans_.MergeFrom(from.plans_);
  applicationspecificinfo_.MergeFrom(from.applicationspecificinfo_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_modelinfo()) {
      mutable_modelinfo()->::caffe2::ModelInfo::MergeFrom(from.modelinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MetaNetDef::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MetaNetDef::CopyFrom(const MetaNetDef& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MetaNetDef::IsInitialized() const {

  for (int i = 0; i < blobs_size(); i++) {
    if (!this->blobs(i).IsInitialized()) return false;
  }
  for (int i = 0; i < nets_size(); i++) {
    if (!this->nets(i).IsInitialized()) return false;
  }
  for (int i = 0; i < plans_size(); i++) {
    if (!this->plans(i).IsInitialized()) return false;
  }
  for (int i = 0; i < applicationspecificinfo_size(); i++) {
    if (!this->applicationspecificinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MetaNetDef::Swap(MetaNetDef* other) {
  if (other != this) {
    blobs_.Swap(&other->blobs_);
    nets_.Swap(&other->nets_);
    std::swap(modelinfo_, other->modelinfo_);
    plans_.Swap(&other->plans_);
    applicationspecificinfo_.Swap(&other->applicationspecificinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MetaNetDef::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MetaNetDef_descriptor_;
  metadata.reflection = MetaNetDef_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
