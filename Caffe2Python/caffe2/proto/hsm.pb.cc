// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: hsm.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "hsm.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* NodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NodeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* TreeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TreeProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* HierarchyProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HierarchyProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathProto_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathNodeProto_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathNodeProto_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_hsm_2eproto() {
  protobuf_AddDesc_hsm_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "hsm.proto");
  GOOGLE_CHECK(file != NULL);
  NodeProto_descriptor_ = file->message_type(0);
  static const int NodeProto_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, children_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, word_ids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, offset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, scores_),
  };
  NodeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NodeProto_descriptor_,
      NodeProto::default_instance_,
      NodeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NodeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NodeProto));
  TreeProto_descriptor_ = file->message_type(1);
  static const int TreeProto_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, root_node_),
  };
  TreeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TreeProto_descriptor_,
      TreeProto::default_instance_,
      TreeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TreeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TreeProto));
  HierarchyProto_descriptor_ = file->message_type(2);
  static const int HierarchyProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, paths_),
  };
  HierarchyProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HierarchyProto_descriptor_,
      HierarchyProto::default_instance_,
      HierarchyProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HierarchyProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HierarchyProto));
  PathProto_descriptor_ = file->message_type(3);
  static const int PathProto_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, word_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, path_nodes_),
  };
  PathProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathProto_descriptor_,
      PathProto::default_instance_,
      PathProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathProto));
  PathNodeProto_descriptor_ = file->message_type(4);
  static const int PathNodeProto_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, length_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, target_),
  };
  PathNodeProto_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathNodeProto_descriptor_,
      PathNodeProto::default_instance_,
      PathNodeProto_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathNodeProto, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathNodeProto));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_hsm_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NodeProto_descriptor_, &NodeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TreeProto_descriptor_, &TreeProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HierarchyProto_descriptor_, &HierarchyProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathProto_descriptor_, &PathProto::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathNodeProto_descriptor_, &PathNodeProto::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_hsm_2eproto() {
  delete NodeProto::default_instance_;
  delete NodeProto_reflection_;
  delete TreeProto::default_instance_;
  delete TreeProto_reflection_;
  delete HierarchyProto::default_instance_;
  delete HierarchyProto_reflection_;
  delete PathProto::default_instance_;
  delete PathProto_reflection_;
  delete PathNodeProto::default_instance_;
  delete PathNodeProto_reflection_;
}

void protobuf_AddDesc_hsm_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\thsm.proto\022\006caffe2\"p\n\tNodeProto\022#\n\010chil"
    "dren\030\001 \003(\0132\021.caffe2.NodeProto\022\020\n\010word_id"
    "s\030\002 \003(\005\022\016\n\006offset\030\003 \001(\005\022\014\n\004name\030\004 \001(\t\022\016\n"
    "\006scores\030\005 \003(\002\"1\n\tTreeProto\022$\n\troot_node\030"
    "\001 \001(\0132\021.caffe2.NodeProto\"@\n\016HierarchyPro"
    "to\022\014\n\004size\030\001 \001(\005\022 \n\005paths\030\002 \003(\0132\021.caffe2"
    ".PathProto\"G\n\tPathProto\022\017\n\007word_id\030\001 \001(\005"
    "\022)\n\npath_nodes\030\002 \003(\0132\025.caffe2.PathNodePr"
    "oto\">\n\rPathNodeProto\022\r\n\005index\030\001 \001(\005\022\016\n\006l"
    "ength\030\002 \001(\005\022\016\n\006target\030\003 \001(\005", 387);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "hsm.proto", &protobuf_RegisterTypes);
  NodeProto::default_instance_ = new NodeProto();
  TreeProto::default_instance_ = new TreeProto();
  HierarchyProto::default_instance_ = new HierarchyProto();
  PathProto::default_instance_ = new PathProto();
  PathNodeProto::default_instance_ = new PathNodeProto();
  NodeProto::default_instance_->InitAsDefaultInstance();
  TreeProto::default_instance_->InitAsDefaultInstance();
  HierarchyProto::default_instance_->InitAsDefaultInstance();
  PathProto::default_instance_->InitAsDefaultInstance();
  PathNodeProto::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_hsm_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_hsm_2eproto {
  StaticDescriptorInitializer_hsm_2eproto() {
    protobuf_AddDesc_hsm_2eproto();
  }
} static_descriptor_initializer_hsm_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int NodeProto::kChildrenFieldNumber;
const int NodeProto::kWordIdsFieldNumber;
const int NodeProto::kOffsetFieldNumber;
const int NodeProto::kNameFieldNumber;
const int NodeProto::kScoresFieldNumber;
#endif  // !_MSC_VER

NodeProto::NodeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NodeProto::InitAsDefaultInstance() {
}

NodeProto::NodeProto(const NodeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NodeProto::SharedCtor() {
  _cached_size_ = 0;
  offset_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NodeProto::~NodeProto() {
  SharedDtor();
}

void NodeProto::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NodeProto_descriptor_;
}

const NodeProto& NodeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hsm_2eproto();
  return *default_instance_;
}

NodeProto* NodeProto::default_instance_ = NULL;

NodeProto* NodeProto::New() const {
  return new NodeProto;
}

void NodeProto::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    offset_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  children_.Clear();
  word_ids_.Clear();
  scores_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .caffe2.NodeProto children = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_children:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_children()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_children;
        if (input->ExpectTag(16)) goto parse_word_ids;
        break;
      }

      // repeated int32 word_ids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_word_ids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_word_ids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_word_ids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_word_ids;
        if (input->ExpectTag(24)) goto parse_offset;
        break;
      }

      // optional int32 offset = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &offset_)));
          set_has_offset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_scores;
        break;
      }

      // repeated float scores = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_scores:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 1, 45, input, this->mutable_scores())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, this->mutable_scores())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_scores;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .caffe2.NodeProto children = 1;
  for (int i = 0; i < this->children_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->children(i), output);
  }

  // repeated int32 word_ids = 2;
  for (int i = 0; i < this->word_ids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->word_ids(i), output);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->offset(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // repeated float scores = 5;
  for (int i = 0; i < this->scores_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(
      5, this->scores(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NodeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .caffe2.NodeProto children = 1;
  for (int i = 0; i < this->children_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->children(i), target);
  }

  // repeated int32 word_ids = 2;
  for (int i = 0; i < this->word_ids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->word_ids(i), target);
  }

  // optional int32 offset = 3;
  if (has_offset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->offset(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // repeated float scores = 5;
  for (int i = 0; i < this->scores_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteFloatToArray(5, this->scores(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NodeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 offset = 3;
    if (has_offset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->offset());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated .caffe2.NodeProto children = 1;
  total_size += 1 * this->children_size();
  for (int i = 0; i < this->children_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->children(i));
  }

  // repeated int32 word_ids = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->word_ids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->word_ids(i));
    }
    total_size += 1 * this->word_ids_size() + data_size;
  }

  // repeated float scores = 5;
  {
    int data_size = 0;
    data_size = 4 * this->scores_size();
    total_size += 1 * this->scores_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NodeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NodeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NodeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NodeProto::MergeFrom(const NodeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  children_.MergeFrom(from.children_);
  word_ids_.MergeFrom(from.word_ids_);
  scores_.MergeFrom(from.scores_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_offset()) {
      set_offset(from.offset());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NodeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NodeProto::CopyFrom(const NodeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NodeProto::IsInitialized() const {

  return true;
}

void NodeProto::Swap(NodeProto* other) {
  if (other != this) {
    children_.Swap(&other->children_);
    word_ids_.Swap(&other->word_ids_);
    std::swap(offset_, other->offset_);
    std::swap(name_, other->name_);
    scores_.Swap(&other->scores_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NodeProto_descriptor_;
  metadata.reflection = NodeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TreeProto::kRootNodeFieldNumber;
#endif  // !_MSC_VER

TreeProto::TreeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TreeProto::InitAsDefaultInstance() {
  root_node_ = const_cast< ::caffe2::NodeProto*>(&::caffe2::NodeProto::default_instance());
}

TreeProto::TreeProto(const TreeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TreeProto::SharedCtor() {
  _cached_size_ = 0;
  root_node_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TreeProto::~TreeProto() {
  SharedDtor();
}

void TreeProto::SharedDtor() {
  if (this != default_instance_) {
    delete root_node_;
  }
}

void TreeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TreeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TreeProto_descriptor_;
}

const TreeProto& TreeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hsm_2eproto();
  return *default_instance_;
}

TreeProto* TreeProto::default_instance_ = NULL;

TreeProto* TreeProto::New() const {
  return new TreeProto;
}

void TreeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_root_node()) {
      if (root_node_ != NULL) root_node_->::caffe2::NodeProto::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TreeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .caffe2.NodeProto root_node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_root_node()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TreeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .caffe2.NodeProto root_node = 1;
  if (has_root_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->root_node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TreeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .caffe2.NodeProto root_node = 1;
  if (has_root_node()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->root_node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TreeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .caffe2.NodeProto root_node = 1;
    if (has_root_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->root_node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TreeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TreeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TreeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TreeProto::MergeFrom(const TreeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_root_node()) {
      mutable_root_node()->::caffe2::NodeProto::MergeFrom(from.root_node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TreeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TreeProto::CopyFrom(const TreeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TreeProto::IsInitialized() const {

  return true;
}

void TreeProto::Swap(TreeProto* other) {
  if (other != this) {
    std::swap(root_node_, other->root_node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TreeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TreeProto_descriptor_;
  metadata.reflection = TreeProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HierarchyProto::kSizeFieldNumber;
const int HierarchyProto::kPathsFieldNumber;
#endif  // !_MSC_VER

HierarchyProto::HierarchyProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HierarchyProto::InitAsDefaultInstance() {
}

HierarchyProto::HierarchyProto(const HierarchyProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HierarchyProto::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HierarchyProto::~HierarchyProto() {
  SharedDtor();
}

void HierarchyProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HierarchyProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HierarchyProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HierarchyProto_descriptor_;
}

const HierarchyProto& HierarchyProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hsm_2eproto();
  return *default_instance_;
}

HierarchyProto* HierarchyProto::default_instance_ = NULL;

HierarchyProto* HierarchyProto::New() const {
  return new HierarchyProto;
}

void HierarchyProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    size_ = 0;
  }
  paths_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HierarchyProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 size = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paths;
        break;
      }

      // repeated .caffe2.PathProto paths = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_paths:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_paths()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_paths;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HierarchyProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 size = 1;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->size(), output);
  }

  // repeated .caffe2.PathProto paths = 2;
  for (int i = 0; i < this->paths_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->paths(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HierarchyProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 size = 1;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->size(), target);
  }

  // repeated .caffe2.PathProto paths = 2;
  for (int i = 0; i < this->paths_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->paths(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HierarchyProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 size = 1;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

  }
  // repeated .caffe2.PathProto paths = 2;
  total_size += 1 * this->paths_size();
  for (int i = 0; i < this->paths_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->paths(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HierarchyProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HierarchyProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HierarchyProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HierarchyProto::MergeFrom(const HierarchyProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  paths_.MergeFrom(from.paths_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HierarchyProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HierarchyProto::CopyFrom(const HierarchyProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HierarchyProto::IsInitialized() const {

  return true;
}

void HierarchyProto::Swap(HierarchyProto* other) {
  if (other != this) {
    std::swap(size_, other->size_);
    paths_.Swap(&other->paths_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HierarchyProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HierarchyProto_descriptor_;
  metadata.reflection = HierarchyProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathProto::kWordIdFieldNumber;
const int PathProto::kPathNodesFieldNumber;
#endif  // !_MSC_VER

PathProto::PathProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathProto::InitAsDefaultInstance() {
}

PathProto::PathProto(const PathProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathProto::SharedCtor() {
  _cached_size_ = 0;
  word_id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathProto::~PathProto() {
  SharedDtor();
}

void PathProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathProto_descriptor_;
}

const PathProto& PathProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hsm_2eproto();
  return *default_instance_;
}

PathProto* PathProto::default_instance_ = NULL;

PathProto* PathProto::New() const {
  return new PathProto;
}

void PathProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    word_id_ = 0;
  }
  path_nodes_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 word_id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &word_id_)));
          set_has_word_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path_nodes;
        break;
      }

      // repeated .caffe2.PathNodeProto path_nodes = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path_nodes:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path_nodes()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path_nodes;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 word_id = 1;
  if (has_word_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->word_id(), output);
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  for (int i = 0; i < this->path_nodes_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path_nodes(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 word_id = 1;
  if (has_word_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->word_id(), target);
  }

  // repeated .caffe2.PathNodeProto path_nodes = 2;
  for (int i = 0; i < this->path_nodes_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path_nodes(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 word_id = 1;
    if (has_word_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->word_id());
    }

  }
  // repeated .caffe2.PathNodeProto path_nodes = 2;
  total_size += 1 * this->path_nodes_size();
  for (int i = 0; i < this->path_nodes_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path_nodes(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathProto::MergeFrom(const PathProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_nodes_.MergeFrom(from.path_nodes_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_word_id()) {
      set_word_id(from.word_id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathProto::CopyFrom(const PathProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathProto::IsInitialized() const {

  return true;
}

void PathProto::Swap(PathProto* other) {
  if (other != this) {
    std::swap(word_id_, other->word_id_);
    path_nodes_.Swap(&other->path_nodes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathProto_descriptor_;
  metadata.reflection = PathProto_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathNodeProto::kIndexFieldNumber;
const int PathNodeProto::kLengthFieldNumber;
const int PathNodeProto::kTargetFieldNumber;
#endif  // !_MSC_VER

PathNodeProto::PathNodeProto()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathNodeProto::InitAsDefaultInstance() {
}

PathNodeProto::PathNodeProto(const PathNodeProto& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathNodeProto::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  length_ = 0;
  target_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathNodeProto::~PathNodeProto() {
  SharedDtor();
}

void PathNodeProto::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathNodeProto::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathNodeProto::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathNodeProto_descriptor_;
}

const PathNodeProto& PathNodeProto::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_hsm_2eproto();
  return *default_instance_;
}

PathNodeProto* PathNodeProto::default_instance_ = NULL;

PathNodeProto* PathNodeProto::New() const {
  return new PathNodeProto;
}

void PathNodeProto::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    length_ = 0;
    target_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathNodeProto::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_length;
        break;
      }

      // optional int32 length = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_length:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &length_)));
          set_has_length();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_target;
        break;
      }

      // optional int32 target = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_target:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &target_)));
          set_has_target();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathNodeProto::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 length = 2;
  if (has_length()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->length(), output);
  }

  // optional int32 target = 3;
  if (has_target()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->target(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathNodeProto::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 length = 2;
  if (has_length()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->length(), target);
  }

  // optional int32 target = 3;
  if (has_target()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->target(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathNodeProto::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 length = 2;
    if (has_length()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->length());
    }

    // optional int32 target = 3;
    if (has_target()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->target());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathNodeProto::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathNodeProto* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathNodeProto*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathNodeProto::MergeFrom(const PathNodeProto& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_length()) {
      set_length(from.length());
    }
    if (from.has_target()) {
      set_target(from.target());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathNodeProto::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathNodeProto::CopyFrom(const PathNodeProto& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathNodeProto::IsInitialized() const {

  return true;
}

void PathNodeProto::Swap(PathNodeProto* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(length_, other->length_);
    std::swap(target_, other->target_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathNodeProto::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathNodeProto_descriptor_;
  metadata.reflection = PathNodeProto_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
