// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: predictor_consts.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "predictor_consts.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace caffe2 {

namespace {

const ::google::protobuf::Descriptor* PredictorConsts_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PredictorConsts_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_predictor_5fconsts_2eproto() {
  protobuf_AddDesc_predictor_5fconsts_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "predictor_consts.proto");
  GOOGLE_CHECK(file != NULL);
  PredictorConsts_descriptor_ = file->message_type(0);
  static const int PredictorConsts_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, meta_net_def_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predictor_dbreader_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, parameters_blob_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, inputs_blob_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, outputs_blob_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, global_init_net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predict_init_net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, predict_net_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, single_predictor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, multi_predictor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, train_init_plan_type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, train_plan_type_),
  };
  PredictorConsts_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PredictorConsts_descriptor_,
      PredictorConsts::default_instance_,
      PredictorConsts_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PredictorConsts, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PredictorConsts));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_predictor_5fconsts_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PredictorConsts_descriptor_, &PredictorConsts::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_predictor_5fconsts_2eproto() {
  delete PredictorConsts::default_instance_;
  delete PredictorConsts_reflection_;
  delete PredictorConsts::_default_meta_net_def_;
  delete PredictorConsts::_default_predictor_dbreader_;
  delete PredictorConsts::_default_parameters_blob_type_;
  delete PredictorConsts::_default_inputs_blob_type_;
  delete PredictorConsts::_default_outputs_blob_type_;
  delete PredictorConsts::_default_global_init_net_type_;
  delete PredictorConsts::_default_predict_init_net_type_;
  delete PredictorConsts::_default_predict_net_type_;
  delete PredictorConsts::_default_single_predictor_;
  delete PredictorConsts::_default_multi_predictor_;
  delete PredictorConsts::_default_train_init_plan_type_;
  delete PredictorConsts::_default_train_plan_type_;
}

void protobuf_AddDesc_predictor_5fconsts_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026predictor_consts.proto\022\006caffe2\"\301\004\n\017Pre"
    "dictorConsts\022$\n\014META_NET_DEF\030\001 \001(\t:\016!!ME"
    "TA_NET_DEF\0220\n\022PREDICTOR_DBREADER\030\002 \001(\t:\024"
    "!!PREDICTOR_DBREADER\0222\n\024PARAMETERS_BLOB_"
    "TYPE\030\003 \001(\t:\024PARAMETERS_BLOB_TYPE\022*\n\020INPU"
    "TS_BLOB_TYPE\030\004 \001(\t:\020INPUTS_BLOB_TYPE\022,\n\021"
    "OUTPUTS_BLOB_TYPE\030\005 \001(\t:\021OUTPUTS_BLOB_TY"
    "PE\0222\n\024GLOBAL_INIT_NET_TYPE\030\006 \001(\t:\024GLOBAL"
    "_INIT_NET_TYPE\0224\n\025PREDICT_INIT_NET_TYPE\030"
    "\007 \001(\t:\025PREDICT_INIT_NET_TYPE\022*\n\020PREDICT_"
    "NET_TYPE\030\010 \001(\t:\020PREDICT_NET_TYPE\022*\n\020SING"
    "LE_PREDICTOR\030\t \001(\t:\020SINGLE_PREDICTOR\022(\n\017"
    "MULTI_PREDICTOR\030\n \001(\t:\017MULTI_PREDICTOR\0222"
    "\n\024TRAIN_INIT_PLAN_TYPE\030\013 \001(\t:\024TRAIN_INIT"
    "_PLAN_TYPE\022(\n\017TRAIN_PLAN_TYPE\030\014 \001(\t:\017TRA"
    "IN_PLAN_TYPE", 612);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "predictor_consts.proto", &protobuf_RegisterTypes);
  PredictorConsts::_default_meta_net_def_ =
      new ::std::string("!!META_NET_DEF", 14);
  PredictorConsts::_default_predictor_dbreader_ =
      new ::std::string("!!PREDICTOR_DBREADER", 20);
  PredictorConsts::_default_parameters_blob_type_ =
      new ::std::string("PARAMETERS_BLOB_TYPE", 20);
  PredictorConsts::_default_inputs_blob_type_ =
      new ::std::string("INPUTS_BLOB_TYPE", 16);
  PredictorConsts::_default_outputs_blob_type_ =
      new ::std::string("OUTPUTS_BLOB_TYPE", 17);
  PredictorConsts::_default_global_init_net_type_ =
      new ::std::string("GLOBAL_INIT_NET_TYPE", 20);
  PredictorConsts::_default_predict_init_net_type_ =
      new ::std::string("PREDICT_INIT_NET_TYPE", 21);
  PredictorConsts::_default_predict_net_type_ =
      new ::std::string("PREDICT_NET_TYPE", 16);
  PredictorConsts::_default_single_predictor_ =
      new ::std::string("SINGLE_PREDICTOR", 16);
  PredictorConsts::_default_multi_predictor_ =
      new ::std::string("MULTI_PREDICTOR", 15);
  PredictorConsts::_default_train_init_plan_type_ =
      new ::std::string("TRAIN_INIT_PLAN_TYPE", 20);
  PredictorConsts::_default_train_plan_type_ =
      new ::std::string("TRAIN_PLAN_TYPE", 15);
  PredictorConsts::default_instance_ = new PredictorConsts();
  PredictorConsts::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_predictor_5fconsts_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_predictor_5fconsts_2eproto {
  StaticDescriptorInitializer_predictor_5fconsts_2eproto() {
    protobuf_AddDesc_predictor_5fconsts_2eproto();
  }
} static_descriptor_initializer_predictor_5fconsts_2eproto_;

// ===================================================================

::std::string* PredictorConsts::_default_meta_net_def_ = NULL;
::std::string* PredictorConsts::_default_predictor_dbreader_ = NULL;
::std::string* PredictorConsts::_default_parameters_blob_type_ = NULL;
::std::string* PredictorConsts::_default_inputs_blob_type_ = NULL;
::std::string* PredictorConsts::_default_outputs_blob_type_ = NULL;
::std::string* PredictorConsts::_default_global_init_net_type_ = NULL;
::std::string* PredictorConsts::_default_predict_init_net_type_ = NULL;
::std::string* PredictorConsts::_default_predict_net_type_ = NULL;
::std::string* PredictorConsts::_default_single_predictor_ = NULL;
::std::string* PredictorConsts::_default_multi_predictor_ = NULL;
::std::string* PredictorConsts::_default_train_init_plan_type_ = NULL;
::std::string* PredictorConsts::_default_train_plan_type_ = NULL;
#ifndef _MSC_VER
const int PredictorConsts::kMETANETDEFFieldNumber;
const int PredictorConsts::kPREDICTORDBREADERFieldNumber;
const int PredictorConsts::kPARAMETERSBLOBTYPEFieldNumber;
const int PredictorConsts::kINPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kOUTPUTSBLOBTYPEFieldNumber;
const int PredictorConsts::kGLOBALINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTINITNETTYPEFieldNumber;
const int PredictorConsts::kPREDICTNETTYPEFieldNumber;
const int PredictorConsts::kSINGLEPREDICTORFieldNumber;
const int PredictorConsts::kMULTIPREDICTORFieldNumber;
const int PredictorConsts::kTRAININITPLANTYPEFieldNumber;
const int PredictorConsts::kTRAINPLANTYPEFieldNumber;
#endif  // !_MSC_VER

PredictorConsts::PredictorConsts()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PredictorConsts::InitAsDefaultInstance() {
}

PredictorConsts::PredictorConsts(const PredictorConsts& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PredictorConsts::SharedCtor() {
  _cached_size_ = 0;
  meta_net_def_ = const_cast< ::std::string*>(_default_meta_net_def_);
  predictor_dbreader_ = const_cast< ::std::string*>(_default_predictor_dbreader_);
  parameters_blob_type_ = const_cast< ::std::string*>(_default_parameters_blob_type_);
  inputs_blob_type_ = const_cast< ::std::string*>(_default_inputs_blob_type_);
  outputs_blob_type_ = const_cast< ::std::string*>(_default_outputs_blob_type_);
  global_init_net_type_ = const_cast< ::std::string*>(_default_global_init_net_type_);
  predict_init_net_type_ = const_cast< ::std::string*>(_default_predict_init_net_type_);
  predict_net_type_ = const_cast< ::std::string*>(_default_predict_net_type_);
  single_predictor_ = const_cast< ::std::string*>(_default_single_predictor_);
  multi_predictor_ = const_cast< ::std::string*>(_default_multi_predictor_);
  train_init_plan_type_ = const_cast< ::std::string*>(_default_train_init_plan_type_);
  train_plan_type_ = const_cast< ::std::string*>(_default_train_plan_type_);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PredictorConsts::~PredictorConsts() {
  SharedDtor();
}

void PredictorConsts::SharedDtor() {
  if (meta_net_def_ != _default_meta_net_def_) {
    delete meta_net_def_;
  }
  if (predictor_dbreader_ != _default_predictor_dbreader_) {
    delete predictor_dbreader_;
  }
  if (parameters_blob_type_ != _default_parameters_blob_type_) {
    delete parameters_blob_type_;
  }
  if (inputs_blob_type_ != _default_inputs_blob_type_) {
    delete inputs_blob_type_;
  }
  if (outputs_blob_type_ != _default_outputs_blob_type_) {
    delete outputs_blob_type_;
  }
  if (global_init_net_type_ != _default_global_init_net_type_) {
    delete global_init_net_type_;
  }
  if (predict_init_net_type_ != _default_predict_init_net_type_) {
    delete predict_init_net_type_;
  }
  if (predict_net_type_ != _default_predict_net_type_) {
    delete predict_net_type_;
  }
  if (single_predictor_ != _default_single_predictor_) {
    delete single_predictor_;
  }
  if (multi_predictor_ != _default_multi_predictor_) {
    delete multi_predictor_;
  }
  if (train_init_plan_type_ != _default_train_init_plan_type_) {
    delete train_init_plan_type_;
  }
  if (train_plan_type_ != _default_train_plan_type_) {
    delete train_plan_type_;
  }
  if (this != default_instance_) {
  }
}

void PredictorConsts::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PredictorConsts::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PredictorConsts_descriptor_;
}

const PredictorConsts& PredictorConsts::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_predictor_5fconsts_2eproto();
  return *default_instance_;
}

PredictorConsts* PredictorConsts::default_instance_ = NULL;

PredictorConsts* PredictorConsts::New() const {
  return new PredictorConsts;
}

void PredictorConsts::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_meta_net_def()) {
      if (meta_net_def_ != _default_meta_net_def_) {
        meta_net_def_->assign(*_default_meta_net_def_);
      }
    }
    if (has_predictor_dbreader()) {
      if (predictor_dbreader_ != _default_predictor_dbreader_) {
        predictor_dbreader_->assign(*_default_predictor_dbreader_);
      }
    }
    if (has_parameters_blob_type()) {
      if (parameters_blob_type_ != _default_parameters_blob_type_) {
        parameters_blob_type_->assign(*_default_parameters_blob_type_);
      }
    }
    if (has_inputs_blob_type()) {
      if (inputs_blob_type_ != _default_inputs_blob_type_) {
        inputs_blob_type_->assign(*_default_inputs_blob_type_);
      }
    }
    if (has_outputs_blob_type()) {
      if (outputs_blob_type_ != _default_outputs_blob_type_) {
        outputs_blob_type_->assign(*_default_outputs_blob_type_);
      }
    }
    if (has_global_init_net_type()) {
      if (global_init_net_type_ != _default_global_init_net_type_) {
        global_init_net_type_->assign(*_default_global_init_net_type_);
      }
    }
    if (has_predict_init_net_type()) {
      if (predict_init_net_type_ != _default_predict_init_net_type_) {
        predict_init_net_type_->assign(*_default_predict_init_net_type_);
      }
    }
    if (has_predict_net_type()) {
      if (predict_net_type_ != _default_predict_net_type_) {
        predict_net_type_->assign(*_default_predict_net_type_);
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_single_predictor()) {
      if (single_predictor_ != _default_single_predictor_) {
        single_predictor_->assign(*_default_single_predictor_);
      }
    }
    if (has_multi_predictor()) {
      if (multi_predictor_ != _default_multi_predictor_) {
        multi_predictor_->assign(*_default_multi_predictor_);
      }
    }
    if (has_train_init_plan_type()) {
      if (train_init_plan_type_ != _default_train_init_plan_type_) {
        train_init_plan_type_->assign(*_default_train_init_plan_type_);
      }
    }
    if (has_train_plan_type()) {
      if (train_plan_type_ != _default_train_plan_type_) {
        train_plan_type_->assign(*_default_train_plan_type_);
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PredictorConsts::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_meta_net_def()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->meta_net_def().data(), this->meta_net_def().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_PREDICTOR_DBREADER;
        break;
      }

      // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PREDICTOR_DBREADER:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predictor_dbreader()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predictor_dbreader().data(), this->predictor_dbreader().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_PARAMETERS_BLOB_TYPE;
        break;
      }

      // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PARAMETERS_BLOB_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_parameters_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->parameters_blob_type().data(), this->parameters_blob_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_INPUTS_BLOB_TYPE;
        break;
      }

      // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_INPUTS_BLOB_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_inputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->inputs_blob_type().data(), this->inputs_blob_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_OUTPUTS_BLOB_TYPE;
        break;
      }

      // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_OUTPUTS_BLOB_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_outputs_blob_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->outputs_blob_type().data(), this->outputs_blob_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_GLOBAL_INIT_NET_TYPE;
        break;
      }

      // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_GLOBAL_INIT_NET_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_global_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->global_init_net_type().data(), this->global_init_net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_PREDICT_INIT_NET_TYPE;
        break;
      }

      // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PREDICT_INIT_NET_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_init_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predict_init_net_type().data(), this->predict_init_net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_PREDICT_NET_TYPE;
        break;
      }

      // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_PREDICT_NET_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_predict_net_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->predict_net_type().data(), this->predict_net_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_SINGLE_PREDICTOR;
        break;
      }

      // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_SINGLE_PREDICTOR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_single_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->single_predictor().data(), this->single_predictor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_MULTI_PREDICTOR;
        break;
      }

      // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_MULTI_PREDICTOR:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_multi_predictor()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->multi_predictor().data(), this->multi_predictor().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_TRAIN_INIT_PLAN_TYPE;
        break;
      }

      // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TRAIN_INIT_PLAN_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_init_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_init_plan_type().data(), this->train_init_plan_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_TRAIN_PLAN_TYPE;
        break;
      }

      // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_TRAIN_PLAN_TYPE:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_train_plan_type()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->train_plan_type().data(), this->train_plan_type().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PredictorConsts::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (has_meta_net_def()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_net_def().data(), this->meta_net_def().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->meta_net_def(), output);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (has_predictor_dbreader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predictor_dbreader().data(), this->predictor_dbreader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->predictor_dbreader(), output);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (has_parameters_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameters_blob_type().data(), this->parameters_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->parameters_blob_type(), output);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (has_inputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputs_blob_type().data(), this->inputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->inputs_blob_type(), output);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (has_outputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputs_blob_type().data(), this->outputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->outputs_blob_type(), output);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (has_global_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->global_init_net_type().data(), this->global_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->global_init_net_type(), output);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (has_predict_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_init_net_type().data(), this->predict_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->predict_init_net_type(), output);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (has_predict_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_net_type().data(), this->predict_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->predict_net_type(), output);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (has_single_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->single_predictor().data(), this->single_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->single_predictor(), output);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (has_multi_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multi_predictor().data(), this->multi_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->multi_predictor(), output);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (has_train_init_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_init_plan_type().data(), this->train_init_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->train_init_plan_type(), output);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (has_train_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_plan_type().data(), this->train_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->train_plan_type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PredictorConsts::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
  if (has_meta_net_def()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->meta_net_def().data(), this->meta_net_def().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->meta_net_def(), target);
  }

  // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
  if (has_predictor_dbreader()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predictor_dbreader().data(), this->predictor_dbreader().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->predictor_dbreader(), target);
  }

  // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
  if (has_parameters_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->parameters_blob_type().data(), this->parameters_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->parameters_blob_type(), target);
  }

  // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
  if (has_inputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->inputs_blob_type().data(), this->inputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->inputs_blob_type(), target);
  }

  // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
  if (has_outputs_blob_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->outputs_blob_type().data(), this->outputs_blob_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->outputs_blob_type(), target);
  }

  // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
  if (has_global_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->global_init_net_type().data(), this->global_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->global_init_net_type(), target);
  }

  // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
  if (has_predict_init_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_init_net_type().data(), this->predict_init_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->predict_init_net_type(), target);
  }

  // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
  if (has_predict_net_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->predict_net_type().data(), this->predict_net_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->predict_net_type(), target);
  }

  // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
  if (has_single_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->single_predictor().data(), this->single_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->single_predictor(), target);
  }

  // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
  if (has_multi_predictor()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->multi_predictor().data(), this->multi_predictor().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->multi_predictor(), target);
  }

  // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
  if (has_train_init_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_init_plan_type().data(), this->train_init_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->train_init_plan_type(), target);
  }

  // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
  if (has_train_plan_type()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->train_plan_type().data(), this->train_plan_type().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->train_plan_type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PredictorConsts::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string META_NET_DEF = 1 [default = "!!META_NET_DEF"];
    if (has_meta_net_def()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->meta_net_def());
    }

    // optional string PREDICTOR_DBREADER = 2 [default = "!!PREDICTOR_DBREADER"];
    if (has_predictor_dbreader()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predictor_dbreader());
    }

    // optional string PARAMETERS_BLOB_TYPE = 3 [default = "PARAMETERS_BLOB_TYPE"];
    if (has_parameters_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->parameters_blob_type());
    }

    // optional string INPUTS_BLOB_TYPE = 4 [default = "INPUTS_BLOB_TYPE"];
    if (has_inputs_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->inputs_blob_type());
    }

    // optional string OUTPUTS_BLOB_TYPE = 5 [default = "OUTPUTS_BLOB_TYPE"];
    if (has_outputs_blob_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->outputs_blob_type());
    }

    // optional string GLOBAL_INIT_NET_TYPE = 6 [default = "GLOBAL_INIT_NET_TYPE"];
    if (has_global_init_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->global_init_net_type());
    }

    // optional string PREDICT_INIT_NET_TYPE = 7 [default = "PREDICT_INIT_NET_TYPE"];
    if (has_predict_init_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_init_net_type());
    }

    // optional string PREDICT_NET_TYPE = 8 [default = "PREDICT_NET_TYPE"];
    if (has_predict_net_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->predict_net_type());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional string SINGLE_PREDICTOR = 9 [default = "SINGLE_PREDICTOR"];
    if (has_single_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->single_predictor());
    }

    // optional string MULTI_PREDICTOR = 10 [default = "MULTI_PREDICTOR"];
    if (has_multi_predictor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->multi_predictor());
    }

    // optional string TRAIN_INIT_PLAN_TYPE = 11 [default = "TRAIN_INIT_PLAN_TYPE"];
    if (has_train_init_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_init_plan_type());
    }

    // optional string TRAIN_PLAN_TYPE = 12 [default = "TRAIN_PLAN_TYPE"];
    if (has_train_plan_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->train_plan_type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PredictorConsts::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PredictorConsts* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PredictorConsts*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PredictorConsts::MergeFrom(const PredictorConsts& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_meta_net_def()) {
      set_meta_net_def(from.meta_net_def());
    }
    if (from.has_predictor_dbreader()) {
      set_predictor_dbreader(from.predictor_dbreader());
    }
    if (from.has_parameters_blob_type()) {
      set_parameters_blob_type(from.parameters_blob_type());
    }
    if (from.has_inputs_blob_type()) {
      set_inputs_blob_type(from.inputs_blob_type());
    }
    if (from.has_outputs_blob_type()) {
      set_outputs_blob_type(from.outputs_blob_type());
    }
    if (from.has_global_init_net_type()) {
      set_global_init_net_type(from.global_init_net_type());
    }
    if (from.has_predict_init_net_type()) {
      set_predict_init_net_type(from.predict_init_net_type());
    }
    if (from.has_predict_net_type()) {
      set_predict_net_type(from.predict_net_type());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_single_predictor()) {
      set_single_predictor(from.single_predictor());
    }
    if (from.has_multi_predictor()) {
      set_multi_predictor(from.multi_predictor());
    }
    if (from.has_train_init_plan_type()) {
      set_train_init_plan_type(from.train_init_plan_type());
    }
    if (from.has_train_plan_type()) {
      set_train_plan_type(from.train_plan_type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PredictorConsts::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PredictorConsts::CopyFrom(const PredictorConsts& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PredictorConsts::IsInitialized() const {

  return true;
}

void PredictorConsts::Swap(PredictorConsts* other) {
  if (other != this) {
    std::swap(meta_net_def_, other->meta_net_def_);
    std::swap(predictor_dbreader_, other->predictor_dbreader_);
    std::swap(parameters_blob_type_, other->parameters_blob_type_);
    std::swap(inputs_blob_type_, other->inputs_blob_type_);
    std::swap(outputs_blob_type_, other->outputs_blob_type_);
    std::swap(global_init_net_type_, other->global_init_net_type_);
    std::swap(predict_init_net_type_, other->predict_init_net_type_);
    std::swap(predict_net_type_, other->predict_net_type_);
    std::swap(single_predictor_, other->single_predictor_);
    std::swap(multi_predictor_, other->multi_predictor_);
    std::swap(train_init_plan_type_, other->train_init_plan_type_);
    std::swap(train_plan_type_, other->train_plan_type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PredictorConsts::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PredictorConsts_descriptor_;
  metadata.reflection = PredictorConsts_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace caffe2

// @@protoc_insertion_point(global_scope)
